<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Fantasy Auction Draft Tracker â€” Dual-League Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Layout base -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- React -->
  <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <!-- CSV parser -->
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>

  <style>
    :root{
      /* Modern dashboard theme */
      --bg:#070b0e;
      --grad1:rgba(52,199,89,.14);
      --grad2:rgba(80,180,255,.10);
      --panel:#0b1419;
      --panel-2:#0e1a21;
      --line:#1f3643;
      --muted:#b6c9d4;
      --brand:#2bb673;
      --brand-2:#2a9d8f;
      --chip:#0d2b2a;
      --chip-line:#2b6a67;
      --ok:#86b6ff;
      --good:#7cf0a1;
      --warn:#ffd166;
      --bad:#ff6b6b;
    }
    html,body{height:100%}
    body{
      background:
        radial-gradient(1200px 900px at 10% -10%, var(--grad1), transparent 40%),
        radial-gradient(1100px 700px at 110% -10%, var(--grad2), transparent 40%),
        var(--bg);
      color:#eaf4f8; -webkit-font-smoothing:antialiased;
      font-family: Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }
    .app-header{
      backdrop-filter: blur(8px);
      background: linear-gradient(135deg, rgba(43,182,115,.18), rgba(24,54,64,.55));
      border-bottom:1px solid var(--line);
    }
    .navtabs{ gap:.5rem }
    .tablink{ border:1px solid var(--line); background:transparent; color:#eaf4f8; border-radius:999px; padding:.35rem .9rem }
    .tablink.active{ background:rgba(124,240,161,.12); border-color:rgba(124,240,161,.4) }

    .panel{ background:linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02)); border:1px solid var(--line); border-radius:16px }
    .panel-2{ background:linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.01)); border:1px solid var(--line); border-radius:14px }
    .panel-title{ font-weight:700; letter-spacing:.2px }
    .metric{ background:var(--panel-2); border:1px solid var(--line); border-radius:12px; padding:.8rem 1rem }
    .metric .label{ color:var(--muted); font-size:.85rem }
    .metric .value{ font-weight:800; font-size:1.35rem }
    .btn-primary{ background:var(--brand); border-color:var(--brand) }
    .btn-outline-light{ border-color:#3e5f6d; color:#eaf4f8 }
    .form-control,.form-select{ background:#0a1216; color:#eaf4f8; border:1px solid #2c4a59; border-radius:10px }
    .table{ color:#eaf4f8 }
    .table th{ color:#d4e7ef; border-color:#203743; font-weight:600 }
    .table td{ border-color:#1a2e38 }
    .sticky{ position:sticky; top:12px; z-index:10 }

    .logo{ width:26px; height:26px; object-fit:contain; margin-right:.5rem; background:#fff; border-radius:6px }
    .pos-badge{ background:#12343e; border:1px solid #2b6a67; border-radius:999px; font-weight:600 }
    .money{ font-variant-numeric:tabular-nums }
    .chip{ display:inline-flex; align-items:center; gap:.35rem; padding:.3rem .6rem; background:var(--chip); border:1px solid var(--chip-line); border-radius:1000px; font-size:.85rem }
    .pill{ padding:.2rem .6rem; border:1px solid #2b6a67; border-radius:999px; background:#0c2225 }
    .divider{ height:1px; background:#183038; margin:.75rem 0 }
    .search{ max-width:340px }

    /* Recommendation chips */
    .rec{ font-weight:800; letter-spacing:.3px; }
    .rec.slam{ background: rgba(124,240,161,.12); border:1px solid rgba(124,240,161,.4); color:#b8f8d2 }
    .rec.target{ background: rgba(134,182,255,.12); border:1px solid rgba(134,182,255,.5); color:#cfe1ff }
    .rec.consider{ background: rgba(255,209,102,.12); border:1px solid rgba(255,209,102,.4); color:#ffe4ac }
    .rec.fade{ background: rgba(255,107,107,.12); border:1px solid rgba(255,107,107,.4); color:#ffc8c8 }
  </style>
</head>
<body>
<header class="app-header py-3 mb-3">
  <div class="container d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center gap-3">
      <h1 class="h4 m-0">Fantasy Auction Draft Tracker</h1>
      <nav class="d-none d-md-flex navtabs">
        <button id="tab-draft" class="tablink active" onclick="window.switchView('draft')">Draft</button>
        <button id="tab-settings" class="tablink" onclick="window.switchView('settings')">Settings</button>
      </nav>
    </div>
    <div class="small text-end">
      <div>Draft Day: <strong>Aug 17</strong></div>
      <div style="color:var(--muted)">Toggle PPR/Standard = switch league context</div>
    </div>
  </div>
</header>

<main class="container" id="root"></main>

<script>
const e = React.createElement;
const {useState,useEffect,useMemo} = React;
const STORAGE_KEY = 'auction_tracker_dual_league_dashboard_v1';

/* Logos */
const LOGO_CODE = { ARI:'ari', ATL:'atl', BAL:'bal', BUF:'buf', CAR:'car', CHI:'chi', CIN:'cin', CLE:'cle',
  DAL:'dal', DEN:'den', DET:'det', GBP:'gb', HOU:'hou', IND:'ind', JAX:'jax', KC:'kc',
  LV:'lv', LAC:'lac', LAR:'lar', MIA:'mia', MIN:'min', NE:'ne', NO:'no', NYG:'nyg',
  NYJ:'nyj', PHI:'phi', PIT:'pit', SF:'sf', SEA:'sea', TB:'tb', TEN:'ten', WAS:'wsh'
};
const TEAMS = [
  {abbr:'ARI',name:'Arizona Cardinals'},{abbr:'ATL',name:'Atlanta Falcons'},{abbr:'BAL',name:'Baltimore Ravens'},
  {abbr:'BUF',name:'Buffalo Bills'},{abbr:'CAR',name:'Carolina Panthers'},{abbr:'CHI',name:'Chicago Bears'},
  {abbr:'CIN',name:'Cincinnati Bengals'},{abbr:'CLE',name:'Cleveland Browns'},{abbr:'DAL',name:'Dallas Cowboys'},
  {abbr:'DEN',name:'Denver Broncos'},{abbr:'DET',name:'Detroit Lions'},{abbr:'GBP',name:'Green Bay Packers'},
  {abbr:'HOU',name:'Houston Texans'},{abbr:'IND',name:'Indianapolis Colts'},{abbr:'JAX',name:'Jacksonville Jaguars'},
  {abbr:'KC',name:'Kansas City Chiefs'},{abbr:'LV',name:'Las Vegas Raiders'},{abbr:'LAC',name:'Los Angeles Chargers'},
  {abbr:'LAR',name:'Los Angeles Rams'},{abbr:'MIA',name:'Miami Dolphins'},{abbr:'MIN',name:'Minnesota Vikings'},
  {abbr:'NE',name:'New England Patriots'},{abbr:'NO',name:'New Orleans Saints'},{abbr:'NYG',name:'New York Giants'},
  {abbr:'NYJ',name:'New York Jets'},{abbr:'PHI',name:'Philadelphia Eagles'},{abbr:'PIT',name:'Pittsburgh Steelers'},
  {abbr:'SF',name:'San Francisco 49ers'},{abbr:'SEA',name:'Seattle Seahawks'},{abbr:'TB',name:'Tampa Bay Buccaneers'},
  {abbr:'TEN',name:'Tennessee Titans'},{abbr:'WAS',name:'Washington Commanders'},
];

/* Components */
function TeamLogo({abbr}) {
  const code=LOGO_CODE[abbr]||abbr.toLowerCase();
  const url=`https://a.espncdn.com/i/teamlogos/nfl/500/${code}.png`;
  return e('img',{className:'logo',alt:abbr+' logo',src:url,onError:(ev)=>{ev.currentTarget.style.display='none';}});
}

/* State helpers */
function useStoredState(initial){
  const [state,setState]=useState(()=>{const raw=localStorage.getItem(STORAGE_KEY); if(!raw) return initial; try{return JSON.parse(raw)}catch(_){return initial}});
  useEffect(()=>localStorage.setItem(STORAGE_KEY,JSON.stringify(state)),[state]);
  return [state,setState];
}
function initialLeagueTeams(names){
  return Array.from({length:10},(_,i)=>({id:i,name:names?.[i] || (i===0?'My Team':('Team '+(i+1))),spent:0,budget:200}));
}
function initialState(){
  const names = Array.from({length:10},(_,i)=> i===0?'My Team':'Team '+(i+1));
  return {
    view:'draft',                // 'draft' | 'settings'
    scoring:'PPR',               // active league context
    // players (rankings) for each scoring
    playersPPR:[], playersSTD:[],
    // filters
    selectedTeam:'', pos:'ALL', q:'',
    // league config
    rosterSize:16,
    targets:{ QB:1, RB:2, WR:2, TE:1, K:1, DEF:1, BN:8 },
    // participant names (applies to both leagues)
    participantNames: names,
    // Separate league states: budgets + drafted per league
    leagues: {
      PPR: { teams: initialLeagueTeams(names), drafted: [] },
      STD: { teams: initialLeagueTeams(names.map((n,i)=> i===0 ? 'My Team (Std)' : n)), drafted: [] }
    },
    // modals
    detail:null, editDraft:null
  };
}

/* CSV parsing (works with your sample headers) */
function normalizePos(pos){
  if(!pos) return 'N/A';
  const p = String(pos).toUpperCase().trim();
  return p.replace(/[0-9]+$/,'').replace('DST','DEF');
}
function parseFPRowFlexible(r, idx){
  const obj = {}; for (const k in r) obj[(k||'').trim()] = r[k];
  const name = (obj['PLAYER NAME'] || obj['Player'] || obj['PLAYER'] || '').toString().trim();
  const team = (obj['TEAM'] || obj['Team'] || obj['NFL Team'] || obj['Tm'] || '').toString().trim().toUpperCase();
  const pos  = normalizePos(obj['POS'] || obj['Pos'] || obj['Position'] || '');
  const rk   = Number(obj['RK'] || obj['Rk'] || obj['Rank'] || obj['Overall'] || idx+1);
  const bye  = (obj['BYE'] || obj['Bye'] || obj['Bye Week'] || '').toString().trim();
  const sos  = (obj['SOS'] || '').toString().trim();
  const ecrVsAdp = (obj['ECR VS ADP'] || obj['ECR vs ADP'] || '').toString().trim();
  const avgDiff  = (obj['AVG. DIFF'] || obj['AVG. DIFF '] || '').toString().trim();
  const pctOver  = (obj['% OVER'] || obj['% OVER '] || '').toString().trim();
  if(!name) return null;
  let abbr = team;
  if (abbr === 'GB') abbr = 'GBP';
  if (abbr === 'JAC') abbr = 'JAX';
  if (abbr === 'LVR') abbr = 'LV';
  if (abbr === 'LA')  abbr = 'LAR';
  if (abbr === 'WSH') abbr = 'WAS';
  return {id:idx,name,teamAbbr:abbr,pos,rank:rk,bye,sos,ecrVsAdp,avgDiff,pctOver,draftedBy:null,cost:null};
}

/* Utils */
function uid(){ return Date.now().toString(36)+Math.random().toString(36).slice(2,8); }
function download(filename, text){
  const a=document.createElement('a');
  a.href=URL.createObjectURL(new Blob([text],{type:'text/csv'}));
  a.download=filename; document.body.appendChild(a); a.click();
  setTimeout(()=>{ URL.revokeObjectURL(a.href); a.remove(); }, 500);
}
function countsByPosForTeam(drafted, teamId){
  const c = {QB:0,RB:0,WR:0,TE:0,K:0,DEF:0};
  for(const d of drafted) if(d.draftedBy===teamId){ if(c[d.pos]!=null) c[d.pos] += 1; }
  return c;
}
function countDraftedByTeam(drafted, teamId){ return drafted.reduce((n,p)=> n + (p.draftedBy===teamId ? 1:0), 0); }
function maxBidForTeam(team, drafted, teamId, rosterSize){
  const draftedCount = countDraftedByTeam(drafted, teamId);
  const remainingSlots = Math.max(rosterSize - draftedCount, 0);
  const mustReserve = Math.max(remainingSlots - 1, 0);
  return Math.max((team?.budget ?? 0) - mustReserve, 0);
}

/* Recommendation + tiers */
function parseDelta(s){ if(!s) return 0; const m=String(s).match(/[-+]?[\d.]+/); return m?parseFloat(m[0]):0; }
function computePosRank(player, allPlayers){
  const samePos = allPlayers.filter(p=>p.pos===player.pos).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
  const idx = samePos.findIndex(p=>p.name===player.name && p.teamAbbr===player.teamAbbr);
  return idx<0 ? null : (idx+1);
}
function posTierLabel(posRank){
  if(!posRank) return '';
  if(posRank<=10) return 'Top 10';
  const base = Math.floor((posRank-1)/10)*10+1;
  const end = base+9;
  return `${base}â€“${end}`;
}
function recommendationFor(p, allPlayers){
  const pr = computePosRank(p, allPlayers);
  const d = parseDelta(p.ecrVsAdp);
  let band = 'consider';
  const pos = p.pos;
  const strong = (pos==='RB'||pos==='WR') ? 24 : (pos==='TE' ? 6 : (pos==='QB' ? 8 : (pos==='DEF'||pos==='K'?3:8)));
  const target = (pos==='RB'||pos==='WR') ? 36 : (pos==='TE' ? 10 : (pos==='QB' ? 12 : (pos==='DEF'||pos==='K'?6:12)));
  if(pr && pr<=strong) band='slam';
  else if(pr && pr<=target) band='target';
  if(d >= +2) band = (band==='consider') ? 'target' : 'slam';
  if(d <= -2) band = (band==='slam') ? 'target' : 'consider';
  return {band, posRank: pr, tier: posTierLabel(pr)};
}
function bandLabel(band){ return band==='slam'?'Slam': band==='target'?'Target': band==='consider'?'Consider':'Fade'; }

/* App */
function App(){
  const [state,setState]=useStoredState(initialState());

  // header tabs
  useEffect(()=>{ window.switchView = (v)=>{
    setState(s=>({...s, view: v}));
    try {
      document.getElementById('tab-draft').classList.toggle('active', v==='draft');
      document.getElementById('tab-settings').classList.toggle('active', v==='settings');
    } catch(_) {}
  }},[]);

  // active league state slices
  const league = state.leagues[state.scoring];
  const currentPlayers = state.scoring==='PPR' ? state.playersPPR : state.playersSTD;

  // filtered roster list
  const roster = useMemo(()=>{
    const list = currentPlayers.filter(p => !p.draftedBy && (!state.selectedTeam || p.teamAbbr===state.selectedTeam));
    const byPos = list.filter(p => state.pos==='ALL' || p.pos===state.pos);
    const q = state.q.trim().toLowerCase();
    const bySearch = !q ? byPos : byPos.filter(p => p.name.toLowerCase().includes(q) || p.pos.toLowerCase().includes(q) || p.teamAbbr.toLowerCase().includes(q));
    return bySearch.sort((a,b)=> (a.rank||9999)-(b.rank||9999));
  },[currentPlayers,state.selectedTeam,state.pos,state.q]);

  // my roster in active league
  const myRoster = useMemo(()=> league.drafted.filter(p=>p.draftedBy===0), [league.drafted]);

  // Needs in active league
  const needInfo = useMemo(()=>{
    const have = countsByPosForTeam(league.drafted, 0);
    const t = state.targets;
    const needQB=Math.max((t.QB||0)-have.QB,0),
          needRB=Math.max((t.RB||0)-have.RB,0),
          needWR=Math.max((t.WR||0)-have.WR,0),
          needTE=Math.max((t.TE||0)-have.TE,0),
          needK =Math.max((t.K ||0)-have.K ,0),
          needDEF=Math.max((t.DEF||0)-have.DEF,0);
    const draftedCount = countDraftedByTeam(league.drafted,0);
    const baseNeeded = needQB+needRB+needWR+needTE+needK+needDEF;
    const totalSlotsLeft = Math.max(state.rosterSize - draftedCount, 0);
    const needBN = Math.max(totalSlotsLeft - baseNeeded, 0);
    return {have,need:{QB:needQB,RB:needRB,WR:needWR,TE:needTE,K:needK,DEF:needDEF,BN:needBN}, totalSlotsLeft};
  },[league.drafted,state.targets,state.rosterSize]);

  // IO: CSV loads
  function importCSV(which,file){
    if(!file) return;
    Papa.parse(file,{
      header:true, skipEmptyLines:true, transformHeader: h => (h||'').trim(),
      complete: (res) => {
        const players = res.data.map(parseFPRowFlexible).filter(Boolean).sort((a,b)=> (a.rank||9999)-(b.rank||9999));
        setState(s => ({...s, [which]: players}));
      }
    });
  }

  // apply participant names to both leagues
  function setParticipantName(idx, val){
    setState(s=>{
      const names = s.participantNames.map((n,i)=> i===idx ? val : n);
      const rename = (lg)=> ({...lg, teams: lg.teams.map(t=> ({...t, name: names[t.id]}))});
      return {...s, participantNames:names, leagues:{ PPR: rename(s.leagues.PPR), STD: rename(s.leagues.STD)}};
    });
  }

  // teams & budgets
  function setTeamBudget(teamId, spent){
    setState(s=>{
      const lg = s.leagues[s.scoring];
      const teams = lg.teams.map(t => t.id===teamId? {...t, spent:Number(spent||0), budget:Number((200-Number(spent||0)).toFixed(2))}:t);
      return {...s, leagues:{...s.leagues, [s.scoring]:{...lg, teams}} };
    });
  }

  // Draft actions â€” all per ACTIVE league
  function draftPlayer(p, teamId, cost){
    setState(s=>{
      const lg = s.leagues[s.scoring];
      const mapDraft = list => list.map(x => (x.id===p.id && x.name===p.name) ? {...x, draftedBy:teamId, cost:Number(cost)} : x);
      const playersPPR = (s.scoring==='PPR' ? mapDraft(s.playersPPR) : s.playersPPR);
      const playersSTD = (s.scoring==='STD' ? mapDraft(s.playersSTD) : s.playersSTD);
      const entry = {uid:uid(), ...p, draftedBy:teamId, cost:Number(cost), scoring:s.scoring, ts:new Date().toISOString()};
      const drafted = lg.drafted.concat([entry]);
      const teams = lg.teams.map(t => t.id===teamId ? {...t, spent:Number((t.spent+Number(cost)).toFixed(2)), budget:Number((200-(t.spent+Number(cost))).toFixed(2))} : t);
      const leagues = {...s.leagues, [s.scoring]:{...lg, drafted, teams}};
      return {...s, playersPPR, playersSTD, leagues, detail:null};
    });
  }
  function undoDraft(entry){
    setState(s=>{
      const lg = s.leagues[s.scoring];
      const target = lg.drafted.find(d => d.uid===entry.uid);
      if(!target) return s;
      const drafted = lg.drafted.filter(d => d.uid!==entry.uid);
      const unmark = list => list.map(x => (x.id===target.id && x.name===target.name) ? {...x, draftedBy:null, cost:null} : x);
      const playersPPR = (s.scoring==='PPR' ? unmark(s.playersPPR) : s.playersPPR);
      const playersSTD = (s.scoring==='STD' ? unmark(s.playersSTD) : s.playersSTD);
      const teams = lg.teams.map(t => t.id===target.draftedBy ? {...t, spent:Number((t.spent-(target.cost||0)).toFixed(2)), budget:Number((200-(t.spent-(target.cost||0))).toFixed(2))} : t);
      const leagues = {...s.leagues, [s.scoring]:{...lg, drafted, teams}};
      return {...s, playersPPR, playersSTD, leagues};
    });
  }
  function applyEdit(uidToEdit, newTeamId, newCost){
    setState(s=>{
      const lg = s.leagues[s.scoring];
      const d = lg.drafted.find(x => x.uid===uidToEdit);
      if(!d) return s;
      const oldTeam = d.draftedBy, oldCost = d.cost;
      const drafted = lg.drafted.map(x => x.uid===uidToEdit ? {...x, draftedBy:newTeamId, cost:Number(newCost)} : x);
      const teams = lg.teams.map(t => {
        if(t.id===oldTeam && oldTeam!==newTeamId){
          const spent = Number((t.spent - oldCost).toFixed(2));
          return {...t, spent, budget:Number((200-spent).toFixed(2))};
        }
        if(t.id===newTeamId){
          const delta = (newTeamId===oldTeam) ? (newCost - oldCost) : newCost;
          const spent = Number((t.spent + delta).toFixed(2));
          return {...t, spent, budget:Number((200-spent).toFixed(2))};
        }
        return t;
      });
      const leagues = {...s.leagues, [s.scoring]:{...lg, drafted, teams}};
      return {...s, leagues, editDraft:null};
    });
  }

  // Export per active league
  function exportDraftCSV(){
    const rows = [['League','Manager','Player','NFL Team','Pos','Cost','Timestamp']];
    for(const p of league.drafted){
      const mgr = league.teams.find(t=>t.id===p.draftedBy)?.name || ('Team '+(p.draftedBy+1));
      rows.push([state.scoring, mgr, p.name, p.teamAbbr, p.pos, p.cost, p.ts||'']);
    }
    const csv = rows.map(r=> r.map(x=>{ const s=(x==null?'':String(x)); return /[",\n]/.test(s) ? `"${s.replace(/"/g,'""')}"` : s; }).join(',')).join('\n');
    download(`draft_results_${state.scoring}.csv`, csv);
  }

  /* UI bits */
  function QuickDraft({player}){
    const [teamId,setTeamId]=useState(0);
    const [cost,setCost]=useState(1);
    const selected = league.teams.find(t=>t.id===teamId);
    const maxBid = maxBidForTeam(selected, league.drafted, teamId, state.rosterSize);
    const disabled = cost > maxBid || cost < 0;
    return e('div',{className:'d-flex align-items-center gap-2'},
      e('select',{className:'form-select form-select-sm',style:{width:'140px'},value:teamId,onChange:e=>setTeamId(Number(e.target.value))},
        league.teams.map(t=> e('option',{key:t.id,value:t.id},t.name))
      ),
      e('input',{type:'number',min:0,step:1,value:cost,onChange:e=>setCost(Number(e.target.value||0)),className:'form-control form-control-sm',style:{width:'90px'}}),
      e('button',{className:'btn btn-sm btn-primary',disabled,onClick:()=>draftPlayer(player,teamId,cost)}, disabled?`Max $${maxBid}`:'Draft')
    );
  }

  function PlayerRow({p}){
    return e('tr',null,
      e('td',null,p.rank),
      e('td',null,
        e('div',{className:'d-flex align-items-center'},
          e(TeamLogo,{abbr:p.teamAbbr}),
          e('div',null,
            e('div',{style:{fontWeight:700}},p.name,' ', e('span',{className:'badge rounded-pill pos-badge ms-2'},p.pos)),
            e('div',{className:'small',style:{color:'var(--muted)'}}, p.teamAbbr, p.bye?` â€¢ Bye ${p.bye}`:'', p.sos?` â€¢ ${p.sos}`:'')
          )
        )
      ),
      e('td',null,
        e('div',{className:'d-flex gap-2'},
          e('button',{className:'btn btn-sm btn-outline-light',onClick:()=>setState(s=>({...s, detail:p}))},'Details'),
          e(QuickDraft,{player:p})
        )
      )
    );
  }

  function DraftListItem({entry}){
    const mgr = league.teams.find(t=>t.id===entry.draftedBy)?.name || ('Team '+(entry.draftedBy+1));
    return e('li',{className:'list-group-item d-flex justify-content-between align-items-center flex-wrap gap-2', style:{background:'var(--panel)', borderColor:'var(--line)'}},
      e('span',null,
        entry.name,' ',
        e('span',{className:'badge rounded-pill pos-badge ms-2'}, entry.pos),
        e('span',{className:'ms-2', style:{color:'var(--muted)', fontSize:'.9rem'}},'â€¢ ',mgr)
      ),
      e('span',null,
        e('span',{className:'money me-3'},'$'+Number(entry.cost||0).toFixed(0)),
        e('span',{className:'linkish me-3',onClick:()=>setState(s=>({...s, editDraft: entry}))},'Edit'),
        e('span',{className:'linkish',onClick:()=>undoDraft(entry)},'Undo')
      )
    );
  }

  /* Views */
  function DraftView(){
    const me = league.teams[0];
    const myMax = maxBidForTeam(me, league.drafted, 0, state.rosterSize);

    // participants dashboard table rows
    const participantRows = league.teams.map(t=>{
      const c = countsByPosForTeam(league.drafted, t.id);
      const draftedCt = countDraftedByTeam(league.drafted, t.id);
      const left = Number(200-(t.spent||0)).toFixed(0);
      return e('tr',{key:t.id},
        e('td',null,t.name),
        e('td',null,'$',left),
        e('td',null,draftedCt),
        e('td',null, e('span',{className:'pill me-1'},'QB ',c.QB), e('span',{className:'pill me-1'},'RB ',c.RB),
                       e('span',{className:'pill me-1'},'WR ',c.WR), e('span',{className:'pill me-1'},'TE ',c.TE),
                       e('span',{className:'pill me-1'},'K ',c.K),   e('span',{className:'pill me-1'},'DEF ',c.DEF))
      );
    });

    return e('div',{className:'row g-3'},

      // Top dashboard metrics
      e('div',{className:'col-12'},
        e('div',{className:'d-flex flex-wrap gap-3'},
          e('div',{className:'metric flex-fill'},
            e('div',{className:'label'},'Active League'),
            e('div',{className:'value'}, state.scoring==='PPR'?'PPR':'Standard'),
            e('div',{className:'mt-2'},
              e('div',{className:'d-inline-flex gap-2'},
                e('button',{className:'btn '+(state.scoring==='PPR'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'PPR'}))},'PPR'),
                e('button',{className:'btn '+(state.scoring==='STD'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'STD'}))},'Standard')
              )
            )
          ),
          e('div',{className:'metric'},
            e('div',{className:'label'},'My Budget Left'),
            e('div',{className:'value'},'$'+Number(200-(me.spent||0)).toFixed(0))
          ),
          e('div',{className:'metric'},
            e('div',{className:'label'},'My Max Bid'),
            e('div',{className:'value'},'$'+myMax)
          ),
          e('div',{className:'metric'},
            e('div',{className:'label'},'My Players'),
            e('div',{className:'value'}, countDraftedByTeam(league.drafted,0) + ' / ' + state.rosterSize)
          )
        )
      ),

      // Left: filters & other managers
      e('div',{className:'col-12 col-lg-4'},
        e('div',{className:'panel p-3 sticky'},
          e('div',{className:'panel-title mb-2'},'Filters'),
          e('div',{className:'mb-3'},
            e('label',{className:'form-label'},'Team Drawn From Hat'),
            e('select',{className:'form-select',value:state.selectedTeam,onChange:ev=>setState(s=>({...s,selectedTeam:ev.target.value}))},
              [e('option',{key:'',value:''},'All Teams')].concat(TEAMS.map(t=> e('option',{key:t.abbr,value:t.abbr},`${t.abbr} â€” ${t.name}`)))
            ),
            state.selectedTeam ? e('div',{className:'mt-2 chip'}, e(TeamLogo,{abbr:state.selectedTeam}), e('span',null,state.selectedTeam)) : e('div',{className:'mt-2', style:{color:'var(--muted)'}},'No team selected')
          ),
          e('div',{className:'mb-3'},
            e('label',{className:'form-label'},'Position'),
            e('ul',{className:'nav nav-pills flex-wrap gap-1'},
              ['ALL','QB','RB','WR','TE','K','DEF'].map(pos =>
                e('li',{className:'nav-item',key:pos},
                  e('button',{className:'nav-link '+(state.pos===pos?'active':''),onClick:()=>setState(s=>({...s,pos}))},pos)
                )
              )
            )
          ),
          e('div',{className:'mb-2'},
            e('input',{type:'search',className:'form-control search',placeholder:'Search playersâ€¦',value:state.q,onChange:e2=>setState(s=>({...s,q:e2.target.value}))})
          ),
          e('div',{className:'divider'}),
          e('div',{className:'panel-title mb-2'},'Other Managers (active league)'),
          league.teams.slice(1).map(t =>{
            const maxB = maxBidForTeam(t, league.drafted, t.id, state.rosterSize);
            return e('div',{key:t.id,className:'d-flex align-items-center justify-content-between mb-2 flex-wrap gap-2'},
              e('span',{className:'pill flex-grow-1'}, t.name),
              e('input',{type:'number',min:0,step:1,className:'form-control form-control-sm',style:{width:'26%'},value:t.spent,onChange:e2=>setTeamBudget(t.id,e2.target.value)}),
              e('span',{className:'money small pill'}, 'Max $'+maxB)
            );
          })
        )
      ),

      // Middle: roster + actions
      e('div',{className:'col-12 col-lg-5'},
        e('div',{className:'panel p-3'},
          e('div',{className:'d-flex justify-content-between align-items-center mb-2'},
            e('div',{className:'panel-title h5 m-0'}, state.selectedTeam ? ('Roster â€” '+(TEAMS.find(t=>t.abbr===state.selectedTeam)?.name || state.selectedTeam)) : 'All Available Players'),
            e('span',{className:'small',style:{color:'var(--muted)'}}, roster.length+' players')
          ),
          e('div',{className:'table-responsive',style:{maxHeight:'60vh',overflow:'auto', borderRadius:'12px'}},
            e('table',{className:'table table-sm align-middle'},
              e('thead',null, e('tr',null, e('th',null,'#'), e('th',null,'Player / Team / Pos'), e('th',null,'Actions'))),
              e('tbody',null, roster.map(p=> e(PlayerRow,{key:p.id+'-'+p.name,p})))
            )
          )
        )
      ),

      // Right: my roster + needs + export
      e('div',{className:'col-12 col-lg-3'},
        e('div',{className:'panel p-3 sticky'},
          e('div',{className:'panel-title mb-2'},'My Roster ('+state.scoring+')'),
          (myRoster.length===0) ? e('div',{style:{color:'var(--muted)'}},'No players yet') :
            e('ul',{className:'list-group mb-3', style:{borderRadius:'12px', overflow:'hidden'}},
              myRoster.map(p => e(DraftListItem,{key:p.uid, entry:p}))
            ),
          e('div',{className:'divider'}),
          (function(){
            const myMax = maxBidForTeam(me, league.drafted, 0, state.rosterSize);
            return e('div',{className:'row g-2'},
              e('div',{className:'col-6'}, e('div',{className:'metric'}, e('div',{className:'label'},'Budget Left'), e('div',{className:'value'}, '$'+Number(200-(me.spent||0)).toFixed(0)))),
              e('div',{className:'col-6'}, e('div',{className:'metric'}, e('div',{className:'label'},'Max Bid'), e('div',{className:'value'}, '$'+myMax)))
            );
          })(),
          e('div',{className:'divider'}),
          e('div',{className:'panel-title mb-2'},'Needs by Position'),
          (function(){
            const t = state.targets, n = needInfo.need, h = needInfo.have;
            const Row = (label,key)=> e('div',{className:'d-flex justify-content-between small mb-1'},
              e('span',null,label, ' (', h[key]||0,'/', t[key]||0,')'),
              e('span',null, n[key] > 0 ? ('Need '+n[key]) : 'OK')
            );
            return e('div',null,
              Row('QB','QB'), Row('RB','RB'), Row('WR','WR'), Row('TE','TE'), Row('K','K'), Row('DEF','DEF'),
              e('div',{className:'d-flex justify-content-between small mt-2'},
                e('span',null,'Bench'),
                e('span',null, n.BN>0 ? ('Need '+n.BN) : 'OK')
              ),
              e('div',{className:'small mt-2',style:{color:'var(--muted)'}}, 'Slots left: ', needInfo.totalSlotsLeft)
            );
          })(),
          e('div',{className:'divider'}),
          e('button',{className:'btn btn-primary w-100',onClick:exportDraftCSV},'Export '+state.scoring+' Draft CSV')
        )
      ),

      // Participants dashboard table
      e('div',{className:'col-12'},
        e('div',{className:'panel p-3'},
          e('div',{className:'panel-title mb-2'},'League Participants â€” '+state.scoring),
          e('div',{className:'table-responsive'},
            e('table',{className:'table table-sm align-middle'},
              e('thead',null, e('tr',null, e('th',null,'Team'), e('th',null,'$ Left'), e('th',null,'# Drafted'), e('th',null,'By Position'))),
              e('tbody',null, participantRows)
            )
          )
        )
      ),

      // Details modal (modern, with recommendation + tiers)
      state.detail && (function(){
        const p = state.detail;
        const rec = recommendationFor(p, currentPlayers); // {band,posRank,tier}
        const band = rec.band; const label = bandLabel(band);
        const bandClass = 'rec chip '+band;
        const myMax = maxBidForTeam(me, league.drafted, 0, state.rosterSize);

        return e('div',{className:'modal show d-block',tabIndex:'-1',role:'dialog','aria-modal':'true'},
          e('div',{className:'modal-dialog modal-dialog-scrollable'},
            e('div',{className:'modal-content', style:{background:'var(--panel)', color:'#eaf4f8', borderColor:'var(--line)'}},
              e('div',{className:'modal-header'},
                e('div',null,
                  e('div',{className:'h5 m-0'}, p.name),
                  e('div',{className:'small', style:{color:'var(--muted)'}}, p.teamAbbr,' â€¢ ',p.pos)
                ),
                e('button',{type:'button',className:'btn-close',onClick:()=>setState(s=>({...s, detail:null})),'aria-label':'Close'})
              ),
              e('div',{className:'modal-body'},
                e('div',{className:'d-flex align-items-center gap-2 mb-3'},
                  e(TeamLogo,{abbr:p.teamAbbr}),
                  e('span',{className:bandClass}, 'Expert Signal: ', label)
                ),
                e('div',{className:'mb-2'},
                  e('span',{className:'chip'}, 'Position Rank: ', rec.posRank?('#'+rec.posRank):'â€”'),
                  rec.tier && e('span',{className:'chip ms-2'}, 'Tier: ', rec.tier)
                ),
                e('div',{className:'small', style:{color:'var(--muted)'}},
                  'Overall Rank: ', p.rank,
                  p.bye?` â€¢ Bye ${p.bye}`:'',
                  p.sos?` â€¢ ${p.sos}`:'',
                  p.ecrVsAdp?` â€¢ ECR vs ADP ${p.ecrVsAdp}`:'',
                  p.avgDiff?` â€¢ Avg Diff ${p.avgDiff}`:'',
                  p.pctOver?` â€¢ % Over ${p.pctOver}`:''
                )
              ),
              e('div',{className:'modal-footer d-flex justify-content-between align-items-center'},
                e('span',{className:'pill'},'My Max Bid: $'+myMax),
                e(QuickDraft,{player:p})
              )
            )
          )
        );
      })(),

      // Edit Draft modal
      state.editDraft && (function(){
        const entry = state.editDraft;
        let newTeam = entry.draftedBy, newCost = entry.cost;
        return e('div',{className:'modal show d-block',tabIndex:'-1',role:'dialog','aria-modal':'true'},
          e('div',{className:'modal-dialog'},
            e('div',{className:'modal-content', style:{background:'var(--panel)', color:'#eaf4f8', borderColor:'var(--line)'}},
              e('div',{className:'modal-header'},
                e('h5',{className:'modal-title'}, 'Edit Draft â€” ', entry.name,' (',state.scoring,')'),
                e('button',{type:'button',className:'btn-close',onClick:()=>setState(s=>({...s, editDraft:null})),'aria-label':'Close'})
              ),
              e('div',{className:'modal-body'},
                e('div',{className:'mb-3'},
                  e('label',{className:'form-label'},'Manager'),
                  e('select',{defaultValue:entry.draftedBy,className:'form-select',onChange:ev=>{newTeam=Number(ev.target.value)}},
                    league.teams.map(t=> e('option',{key:t.id,value:t.id},t.name))
                  )
                ),
                e('div',{className:'mb-3'},
                  e('label',{className:'form-label'},'Amount ($)'),
                  e('input',{type:'number',min:0,step:1,defaultValue:entry.cost,className:'form-control',onChange:ev=>{newCost=Number(ev.target.value||0)}})
                ),
                e('div',{className:'small', style:{color:'var(--muted)'}},'Saving adjusts team budgets & Max Bids in this league.')
              ),
              e('div',{className:'modal-footer'},
                e('button',{className:'btn btn-outline-light',onClick:()=>setState(s=>({...s, editDraft:null}))},'Cancel'),
                e('button',{className:'btn btn-primary',onClick:()=>applyEdit(entry.uid,newTeam,newCost)},'Save changes')
              )
            )
          )
        );
      })()
    );
  }

  function SettingsView(){
    return e('div',{className:'row g-3'},

      // Imports & default scoring
      e('div',{className:'col-12 col-xl-6'},
        e('div',{className:'panel p-3'},
          e('div',{className:'panel-title mb-2'},'Imports & Default League'),
          e('div',{className:'mb-2',style:{color:'var(--muted)'}},'CSV imports are shared; budgets/drafted are per league.'),
          e('div',{className:'mb-3'},
            e('div',{className:'d-inline-flex gap-2'},
              e('button',{className:'btn '+(state.scoring==='PPR'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'PPR'}))},'Default to PPR'),
              e('button',{className:'btn '+(state.scoring==='STD'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'STD'}))},'Default to Standard')
            )
          ),
          e('div',{className:'mb-3'},
            e('label',{className:'form-label'},'Import FantasyPros CSV â€” PPR'),
            e('input',{type:'file',accept:'.csv',className:'form-control',onChange:ev=>{
              const f=ev.target.files[0]; if(!f) return;
              Papa.parse(f,{header:true,skipEmptyLines:true,transformHeader:h=>(h||'').trim(),complete:(res)=>{
                const players = res.data.map(parseFPRowFlexible).filter(Boolean).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
                setState(s=>({...s,playersPPR:players}));
              }});
            }}),
            e('div',{className:'small',style:{color:'var(--muted)'}}, state.playersPPR.length?('Loaded '+state.playersPPR.length+' (PPR)'):'No PPR file loaded yet')
          ),
          e('div',{className:'mb-3'},
            e('label',{className:'form-label'},'Import FantasyPros CSV â€” Standard'),
            e('input',{type:'file',accept:'.csv',className:'form-control',onChange:ev=>{
              const f=ev.target.files[0]; if(!f) return;
              Papa.parse(f,{header:true,skipEmptyLines:true,transformHeader:h=>(h||'').trim(),complete:(res)=>{
                const players = res.data.map(parseFPRowFlexible).filter(Boolean).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
                setState(s=>({...s,playersSTD:players}));
              }});
            }}),
            e('div',{className:'small',style:{color:'var(--muted)'}}, state.playersSTD.length?('Loaded '+state.playersSTD.length+' (Standard)'):'No Standard file loaded yet')
          )
        )
      ),

      // Roster & positions
      e('div',{className:'col-12 col-xl-6'},
        e('div',{className:'panel p-3'},
          e('div',{className:'panel-title mb-2'},'Roster & Positions'),
          e('div',{className:'mb-3'},
            e('label',{className:'form-label'},'Total Roster Size'),
            e('input',{type:'number',min:1,step:1,value:state.rosterSize,onChange:e2=>setState(s=>({...s, rosterSize: Math.max(1, Number(e2.target.value||16))})),className:'form-control'})
          ),
          e('div',{className:'row g-2'},
            ['QB','RB','WR','TE','K','DEF','BN'].map(key =>
              e('div',{className:'col-6',key},
                e('label',{className:'form-label'}, key+' slots'),
                e('input',{type:'number',min:0,step:1,className:'form-control',value:state.targets[key],onChange:ev=>{
                  const v=Math.max(0,Number(ev.target.value||0));
                  setState(s=>({...s, targets:{...s.targets,[key]:v}}));
                }})
              )
            )
          ),
          e('div',{className:'small mt-2',style:{color:'var(--muted)'}},
            'Bench fills after required slots for Needs; Max Bid always respects total roster size.'
          )
        )
      ),

      // Participants (names for both leagues)
      e('div',{className:'col-12'},
        e('div',{className:'panel p-3'},
          e('div',{className:'panel-title mb-2'},'Participants (applies to both leagues)'),
          e('div',{className:'row g-2'},
            state.participantNames.map((n,i)=>
              e('div',{className:'col-12 col-md-6 col-lg-4',key:i},
                e('label',{className:'form-label'}, (i===0?'My Team':'Team '+(i+1))),
                e('input',{className:'form-control',value:n,onChange:ev=>setParticipantName(i, ev.target.value)})
              )
            )
          )
        )
      ),

      // Save / back
      e('div',{className:'col-12'},
        e('div',{className:'panel p-3 d-flex justify-content-between align-items-center'},
          e('div',null,
            e('div',{className:'panel-title'},'All set!'),
            e('div',{className:'small',style:{color:'var(--muted)'}},'Go back to the Draft tab to run each league. Switch PPR/Standard at the top anytime.')
          ),
          e('button',{className:'btn btn-primary',onClick:()=>window.switchView('draft')},'Go to Draft')
        )
      )
    );
  }

  // render view
  return state.view==='settings' ? e(SettingsView) : e(DraftView);
}

ReactDOM.createRoot(document.getElementById('root')).render(e(App));
</script>
</body>
</html>
