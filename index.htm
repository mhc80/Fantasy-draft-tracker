<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Fantasy Auction Draft Tracker — Modern UX + Draft Signal + Tiers</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap only for layout; custom styles do the heavy lifting -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <style>
    :root{
      --bg:#070e0b; --panel:#0b1913; --glass:rgba(255,255,255,.05);
      --accent:#34c759; --accent-2:#2b9e48; --muted:#a6ccb8; --line:#214f36;
      --warn:#ffd166; --bad:#ff6b6b; --good:#7cf0a1; --ok:#86b6ff;
      --chip:#133323; --chip-line:#245d40;
    }
    html,body{height:100%}
    body{
      background:
        radial-gradient(1200px 800px at 10% 0%, rgba(52,199,89,.09), transparent 40%),
        radial-gradient(1000px 700px at 90% 10%, rgba(134,182,255,.09), transparent 45%),
        var(--bg);
      color:#eaffec; -webkit-font-smoothing:antialiased; font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Inter,Roboto,Helvetica,Arial,sans-serif;
    }
    .app-header{
      backdrop-filter: blur(8px);
      background: linear-gradient(135deg, rgba(52,199,89,.22), rgba(19,51,35,.6));
      border-bottom:1px solid var(--line);
    }
    .panel{ background:linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02)); border:1px solid var(--line); border-radius:16px; }
    .panel .panel-title{ font-weight:700; letter-spacing:.2px }
    .btn-primary{ background:var(--accent-2); border-color:var(--accent-2) }
    .btn-outline-light{ border-color:#3e6b55; color:#eaffec }
    .form-control,.form-select{ background:#0a1511; color:#eaffec; border:1px solid #2c5a43; border-radius:10px }
    .table{ color:#eaffec }
    .table th{ color:#c9eed9; border-color:#234b35; font-weight:600 }
    .table td{ border-color:#1d3c2a }
    .sticky{ position:sticky; top:12px; z-index:10 }
    .chip{ display:inline-flex; align-items:center; gap:.35rem; padding:.25rem .6rem; background:var(--chip); border:1px solid var(--chip-line); border-radius:1000px; font-size:.85rem }
    .logo{ width:28px; height:28px; object-fit:contain; margin-right:.5rem; background:#fff; border-radius:6px }
    .helmet{ width:28px; height:22px; margin-right:.4rem; vertical-align:middle; display:none }
    .pos-badge{ background:#153f2a; border:1px solid #2e7a56; border-radius:999px }
    .money{ font-variant-numeric:tabular-nums }
    .linkish{ text-decoration:underline dotted; cursor:pointer }
    .pill{ padding:.2rem .6rem; border:1px solid #2a6a44; border-radius:999px; background:#113822 }
    .search{ max-width:340px }
    /* Recommendation chips */
    .rec{ font-weight:700; letter-spacing:.3px; }
    .rec.slam{ background: rgba(124,240,161,.12); border:1px solid rgba(124,240,161,.4); color:#aef5c8 }
    .rec.target{ background: rgba(134,182,255,.12); border:1px solid rgba(134,182,255,.5); color:#c7dcff }
    .rec.consider{ background: rgba(255,209,102,.12); border:1px solid rgba(255,209,102,.4); color:#ffe1a7 }
    .rec.fade{ background: rgba(255,107,107,.12); border:1px solid rgba(255,107,107,.4); color:#ffc1c1 }
    .divider{ height:1px; background:#1e3b2b; margin:.75rem 0 }
  </style>
</head>
<body>
<header class="app-header py-3 mb-3">
  <div class="container d-flex justify-content-between align-items-center">
    <h1 class="h4 m-0">Fantasy Auction Draft Tracker</h1>
    <div class="small text-end">
      <div>Draft Day: <strong>Aug 17</strong></div>
      <div class="text-muted" style="color:var(--muted)!important">Import FP CSV → pick team → Details</div>
    </div>
  </div>
</header>

<main class="container" id="root"></main>

<script>
const e = React.createElement;
const {useState,useEffect,useMemo} = React;

const STORAGE_KEY = 'auction_tracker_modern_signal_v1';

// ESPN logo codes
const LOGO_CODE = {
  ARI:'ari', ATL:'atl', BAL:'bal', BUF:'buf', CAR:'car', CHI:'chi', CIN:'cin', CLE:'cle',
  DAL:'dal', DEN:'den', DET:'det', GBP:'gb', HOU:'hou', IND:'ind', JAX:'jax', KC:'kc',
  LV:'lv', LAC:'lac', LAR:'lar', MIA:'mia', MIN:'min', NE:'ne', NO:'no', NYG:'nyg',
  NYJ:'nyj', PHI:'phi', PIT:'pit', SF:'sf', SEA:'sea', TB:'tb', TEN:'ten', WAS:'wsh'
};
const TEAMS = [
  {abbr:'ARI',name:'Arizona Cardinals',color:'#97233F'},
  {abbr:'ATL',name:'Atlanta Falcons',color:'#A71930'},
  {abbr:'BAL',name:'Baltimore Ravens',color:'#241773'},
  {abbr:'BUF',name:'Buffalo Bills',color:'#00338D'},
  {abbr:'CAR',name:'Carolina Panthers',color:'#0085CA'},
  {abbr:'CHI',name:'Chicago Bears',color:'#0B162A'},
  {abbr:'CIN',name:'Cincinnati Bengals',color:'#FB4F14'},
  {abbr:'CLE',name:'Cleveland Browns',color:'#311D00'},
  {abbr:'DAL',name:'Dallas Cowboys',color:'#041E42'},
  {abbr:'DEN',name:'Denver Broncos',color:'#FB4F14'},
  {abbr:'DET',name:'Detroit Lions',color:'#0076B6'},
  {abbr:'GBP',name:'Green Bay Packers',color:'#203731'},
  {abbr:'HOU',name:'Houston Texans',color:'#03202F'},
  {abbr:'IND',name:'Indianapolis Colts',color:'#002C5F'},
  {abbr:'JAX',name:'Jacksonville Jaguars',color:'#006778'},
  {abbr:'KC', name:'Kansas City Chiefs',color:'#E31837'},
  {abbr:'LV', name:'Las Vegas Raiders',color:'#000000'},
  {abbr:'LAC',name:'Los Angeles Chargers',color:'#0080C6'},
  {abbr:'LAR',name:'Los Angeles Rams',color:'#003594'},
  {abbr:'MIA',name:'Miami Dolphins',color:'#008E97'},
  {abbr:'MIN',name:'Minnesota Vikings',color:'#4F2683'},
  {abbr:'NE', name:'New England Patriots',color:'#002244'},
  {abbr:'NO', name:'New Orleans Saints',color:'#D3BC8D'},
  {abbr:'NYG',name:'New York Giants',color:'#0B2265'},
  {abbr:'NYJ',name:'New York Jets',color:'#125740'},
  {abbr:'PHI',name:'Philadelphia Eagles',color:'#004C54'},
  {abbr:'PIT',name:'Pittsburgh Steelers',color:'#FFB612'},
  {abbr:'SF', name:'San Francisco 49ers',color:'#AA0000'},
  {abbr:'SEA',name:'Seattle Seahawks',color:'#002244'},
  {abbr:'TB', name:'Tampa Bay Buccaneers',color:'#D50A0A'},
  {abbr:'TEN',name:'Tennessee Titans',color:'#4B92DB'},
  {abbr:'WAS',name:'Washington Commanders',color:'#5A1414'},
];

function teamByAbbr(a){ return TEAMS.find(t=>t.abbr===a); }
function TeamLogo({abbr}) {
  const code=LOGO_CODE[abbr]||abbr.toLowerCase();
  const url=`https://a.espncdn.com/i/teamlogos/nfl/500/${code}.png`;
  const t=teamByAbbr(abbr)||{color:'#666'};
  return e('span',{className:'d-inline-flex align-items-center'},
    e('img',{className:'logo',alt:abbr+' logo',src:url,onError:(ev)=>{ev.currentTarget.style.display='none';}}),
  );
}
function useStoredState(initial){
  const [state,setState]=useState(()=>{const raw=localStorage.getItem(STORAGE_KEY); if(!raw) return initial; try{return JSON.parse(raw)}catch(_){return initial}});
  useEffect(()=>localStorage.setItem(STORAGE_KEY,JSON.stringify(state)),[state]);
  return [state,setState];
}
function initialState(){
  return {
    scoring:'PPR',
    playersPPR:[], playersSTD:[],
    selectedTeam:'',
    pos:'ALL',
    q:'', rosterSize:16,
    teams:Array.from({length:10},(_,i)=>({id:i,name:i===0?'My Team':('Team '+(i+1)),spent:0,budget:200})),
    drafted:[], // {uid, ...player, draftedBy, cost}
  };
}

// === Flexible parser for your FP headers ===
function normalizePos(pos){
  if(!pos) return 'N/A';
  const p = String(pos).toUpperCase().trim();
  return p.replace(/[0-9]+$/,'').replace('DST','DEF');
}
function parseFPRowFlexible(r, idx){
  const obj = {}; for (const k in r) obj[(k||'').trim()] = r[k];
  const name = (obj['PLAYER NAME'] || obj['Player'] || obj['PLAYER'] || '').toString().trim();
  const team = (obj['TEAM'] || obj['Team'] || obj['NFL Team'] || obj['Tm'] || '').toString().trim().toUpperCase();
  const pos  = normalizePos(obj['POS'] || obj['Pos'] || obj['Position'] || '');
  const rk   = Number(obj['RK'] || obj['Rk'] || obj['Rank'] || obj['Overall'] || idx+1);
  const bye  = (obj['BYE'] || obj['Bye'] || obj['Bye Week'] || '').toString().trim();
  const sos  = (obj['SOS'] || '').toString().trim();
  const ecrVsAdp = (obj['ECR VS ADP'] || obj['ECR vs ADP'] || '').toString().trim();
  const avgDiff  = (obj['AVG. DIFF'] || obj['AVG. DIFF '] || '').toString().trim();
  const pctOver  = (obj['% OVER'] || obj['% OVER '] || '').toString().trim();
  if(!name) return null;
  let abbr = team;
  if (abbr === 'GB') abbr = 'GBP';
  if (abbr === 'JAC') abbr = 'JAX';
  if (abbr === 'LVR') abbr = 'LV';
  if (abbr === 'LA')  abbr = 'LAR';
  if (abbr === 'WSH') abbr = 'WAS';
  return {id:idx,name,teamAbbr:abbr,pos,rank:rk,bye,sos,ecrVsAdp,avgDiff,pctOver,draftedBy:null,cost:null};
}

// === Helpers ===
function uid(){ return Date.now().toString(36)+Math.random().toString(36).slice(2,8); }
function countDraftedByTeam(drafted, teamId){ return drafted.reduce((n,p)=> n + (p.draftedBy===teamId ? 1:0), 0); }
function maxBidForTeam(team, drafted, teamId, rosterSize){
  const draftedCount = countDraftedByTeam(drafted, teamId);
  const remainingSlots = Math.max(rosterSize - draftedCount, 0);
  const mustReserve = Math.max(remainingSlots - 1, 0);
  return Math.max((team?.budget ?? 0) - mustReserve, 0);
}
function download(filename, text){
  const a=document.createElement('a');
  a.href=URL.createObjectURL(new Blob([text],{type:'text/csv'}));
  a.download=filename; document.body.appendChild(a); a.click();
  setTimeout(()=>{ URL.revokeObjectURL(a.href); a.remove(); }, 500);
}
function parseDelta(s){
  if(!s) return 0;
  const m = String(s).match(/[-+]?[\d.]+/);
  return m ? parseFloat(m[0]) : 0;
}

// Position rank within current scoring set
function computePosRank(player, allPlayers){
  const samePos = allPlayers.filter(p=>p.pos===player.pos).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
  const idx = samePos.findIndex(p=>p.name===player.name && p.teamAbbr===player.teamAbbr);
  return idx<0 ? null : (idx+1);
}
function posTierLabel(posRank){
  if(!posRank) return '';
  if(posRank<=10) return 'Top 10';
  const base = Math.floor((posRank-1)/10)*10+1;
  const end = base+9;
  return `${base}–${end}`;
}
// Simple expert-style recommendation using pos rank + ECR vs ADP delta
function recommendationFor(p, allPlayers){
  const pr = computePosRank(p, allPlayers);
  const d = parseDelta(p.ecrVsAdp);
  let band = 'consider'; // default
  const pos = p.pos;
  // thresholds by position
  const strong = (pos==='RB'||pos==='WR') ? 24 : (pos==='TE' ? 6 : (pos==='QB' ? 8 : (pos==='DEF'||pos==='K'?3:8)));
  const target = (pos==='RB'||pos==='WR') ? 36 : (pos==='TE' ? 10 : (pos==='QB' ? 12 : (pos==='DEF'||pos==='K'?6:12)));
  if(pr && pr<=strong) band='slam';
  else if(pr && pr<=target) band='target';
  else band='consider';
  // boost/downgrade with ECR vs ADP
  if(d >= +2) band = (band==='consider') ? 'target' : 'slam';
  if(d <= -2) band = (band==='slam') ? 'target' : 'consider';
  return {band, posRank: pr, tier: posTierLabel(pr)};
}
function bandLabel(band){
  return band==='slam'?'Slam'
       : band==='target'?'Target'
       : band==='consider'?'Consider'
       : 'Fade';
}

function App(){
  const [state,setState]=useStoredState({
    scoring:'PPR', playersPPR:[], playersSTD:[],
    selectedTeam:'', pos:'ALL', q:'', rosterSize:16,
    teams:Array.from({length:10},(_,i)=>({id:i,name:i===0?'My Team':('Team '+(i+1)),spent:0,budget:200})),
    drafted:[], editDraft:null, detail:null
  });

  const currentPlayers = useMemo(()=> state.scoring==='PPR' ? state.playersPPR : state.playersSTD,
    [state.scoring,state.playersPPR,state.playersSTD]);

  const roster = useMemo(()=>{
    const list = currentPlayers.filter(p => !p.draftedBy && (!state.selectedTeam || p.teamAbbr===state.selectedTeam));
    const byPos = list.filter(p => state.pos==='ALL' || p.pos===state.pos);
    const q = state.q.trim().toLowerCase();
    const bySearch = !q ? byPos : byPos.filter(p => p.name.toLowerCase().includes(q) || p.pos.toLowerCase().includes(q) || p.teamAbbr.toLowerCase().includes(q));
    return bySearch.sort((a,b)=> (a.rank||9999)-(b.rank||9999));
  },[currentPlayers,state.selectedTeam,state.pos,state.q]);

  const myRoster = useMemo(()=> state.drafted.filter(p=>p.draftedBy===0), [state.drafted]);

  // IO
  function importCSV(which,file){
    if(!file) return;
    Papa.parse(file,{ header:true, skipEmptyLines:true, transformHeader: h => (h||'').trim(),
      complete: (res) => {
        const players = res.data.map(parseFPRowFlexible).filter(Boolean).sort((a,b)=> (a.rank||9999)-(b.rank||9999));
        setState(s => ({...s, [which]: players}));
      }
    });
  }
  function setTeamBudget(teamId, spent){
    setState(s=>{
      const teams = s.teams.map(t => t.id===teamId? {...t, spent:Number(spent||0), budget:Number((200-Number(spent||0)).toFixed(2))}:t);
      return {...s,teams};
    });
  }
  function renameTeam(teamId, name){ setState(s=> ({...s, teams: s.teams.map(t=> t.id===teamId? {...t, name }: t)})); }

  // Drafting & editing
  function draftPlayer(p, teamId, cost){
    setState(s=>{
      const mapDraft = list => list.map(x => (x.id===p.id && x.name===p.name) ? {...x, draftedBy:teamId, cost:Number(cost)} : x);
      const playersPPR = s.playersPPR.length ? mapDraft(s.playersPPR) : s.playersPPR;
      const playersSTD = s.playersSTD.length ? mapDraft(s.playersSTD) : s.playersSTD;
      const entry = {uid:uid(), ...p, draftedBy:teamId, cost:Number(cost), scoring:s.scoring, ts:new Date().toISOString()};
      const drafted = s.drafted.concat([entry]);
      const teams = s.teams.map(t => t.id===teamId ? {...t, spent:Number((t.spent+Number(cost)).toFixed(2)), budget:Number((200-(t.spent+Number(cost))).toFixed(2))} : t);
      return {...s, playersPPR, playersSTD, drafted, teams};
    });
    setState(s=>({...s, detail:null}));
  }
  function undoDraft(entry){
    setState(s=>{
      const target = s.drafted.find(d => d.uid===entry.uid);
      if(!target) return s;
      const drafted = s.drafted.filter(d => d.uid!==entry.uid);
      const unmark = list => list.map(x => (x.id===target.id && x.name===target.name) ? {...x, draftedBy:null, cost:null} : x);
      const playersPPR = unmark(s.playersPPR);
      const playersSTD = unmark(s.playersSTD);
      const teams = s.teams.map(t => t.id===target.draftedBy ? {...t, spent:Number((t.spent-(target.cost||0)).toFixed(2)), budget:Number((200-(t.spent-(target.cost||0))).toFixed(2))} : t);
      return {...s, drafted, playersPPR, playersSTD, teams};
    });
  }
  function applyEdit(uidToEdit, newTeamId, newCost){
    setState(s=>{
      const d = s.drafted.find(x => x.uid===uidToEdit);
      if(!d) return s;
      const oldTeam = d.draftedBy, oldCost = d.cost;
      const drafted = s.drafted.map(x => x.uid===uidToEdit ? {...x, draftedBy:newTeamId, cost:Number(newCost)} : x);
      const teams = s.teams.map(t => {
        if(t.id===oldTeam && oldTeam!==newTeamId){
          const spent = Number((t.spent - oldCost).toFixed(2));
          return {...t, spent, budget:Number((200-spent).toFixed(2))};
        }
        if(t.id===newTeamId){
          const delta = (newTeamId===oldTeam) ? (newCost - oldCost) : newCost;
          const spent = Number((t.spent + delta).toFixed(2));
          return {...t, spent, budget:Number((200-spent).toFixed(2))};
        }
        return t;
      });
      return {...s, drafted, teams, editDraft:null};
    });
  }
  function exportDraftCSV(){
    const rows = [['Manager','Player','NFL Team','Pos','Cost','Scoring','Timestamp']];
    for(const p of state.drafted){
      const mgr = state.teams.find(t=>t.id===p.draftedBy)?.name || ('Team '+(p.draftedBy+1));
      rows.push([mgr, p.name, p.teamAbbr, p.pos, p.cost, p.scoring||'', p.ts||'']);
    }
    const csv = rows.map(r=> r.map(x=>{ const s=(x==null?'':String(x)); return /[",\n]/.test(s) ? `"${s.replace(/"/g,'""')}"` : s; }).join(',')).join('\n');
    download('draft_results.csv', csv);
  }

  // UI pieces
  function QuickDraft({player,onDraft}){
    const [teamId,setTeamId]=useState(0);
    const [cost,setCost]=useState(1);
    const selected = state.teams.find(t=>t.id===teamId);
    const maxBid = maxBidForTeam(selected, state.drafted, teamId, state.rosterSize);
    const disabled = cost > maxBid || cost < 0;
    return e('div',{className:'d-flex align-items-center gap-2'},
      e('select',{className:'form-select form-select-sm',style:{width:'140px'},value:teamId,onChange:e=>setTeamId(Number(e.target.value))},
        state.teams.map(t=> e('option',{key:t.id,value:t.id},t.name))
      ),
      e('input',{type:'number',min:0,step:1,value:cost,onChange:e=>setCost(Number(e.target.value||0)),className:'form-control form-control-sm',style:{width:'90px'}}),
      e('button',{className:'btn btn-sm btn-primary',disabled,onClick:()=>onDraft(teamId,cost)}, disabled?`Max $${maxBid}`:'Draft')
    );
  }
  function PlayerRow({p}){
    return e('tr',null,
      e('td',null,p.rank),
      e('td',null,
        e('div',{className:'d-flex align-items-center'},
          e(TeamLogo,{abbr:p.teamAbbr}),
          e('div',null,
            e('div',{style:{fontWeight:600}},p.name,' ', e('span',{className:'badge rounded-pill pos-badge ms-2'},p.pos)),
            e('div',{className:'small',style:{color:'var(--muted)'}}, p.teamAbbr, p.bye?` • Bye ${p.bye}`:'', p.sos?` • ${p.sos}`:'')
          )
        )
      ),
      e('td',null,
        e('div',{className:'d-flex gap-2'},
          e('button',{className:'btn btn-sm btn-outline-light',onClick:()=>setState(s=>({...s, detail:p}))},'Details'),
          e(QuickDraft,{player:p,onDraft:(teamId,cost)=>draftPlayer(p,teamId,cost)})
        )
      )
    );
  }
  function DraftListItem({entry}){
    const mgr = state.teams.find(t=>t.id===entry.draftedBy)?.name || ('Team '+(entry.draftedBy+1));
    return e('li',{className:'list-group-item d-flex justify-content-between align-items-center flex-wrap gap-2', style:{background:'var(--panel)', borderColor:'var(--line)'}},
      e('span',null,
        entry.name,' ',
        e('span',{className:'badge rounded-pill pos-badge ms-2'}, entry.pos),
        e('span',{className:'ms-2', style:{color:'var(--muted)', fontSize:'.9rem'}},'• ',mgr)
      ),
      e('span',null,
        e('span',{className:'money me-3'},'$'+Number(entry.cost||0).toFixed(0)),
        e('span',{className:'linkish me-3',onClick:()=>setState(s=>({...s, editDraft: entry}))},'Edit'),
        e('span',{className:'linkish',onClick:()=>undoDraft(entry)},'Undo')
      )
    );
  }

  // Panels
  return e('div',{className:'row g-3'},

    // Left: settings & teams
    e('div',{className:'col-12 col-lg-4'},
      e('div',{className:'panel p-3 sticky'},
        e('div',{className:'d-flex justify-content-between align-items-center mb-2'},
          e('div',{className:'panel-title'},'Setup & Filters'),
          e('button',{className:'btn btn-sm btn-outline-light',onClick:()=>{ if(confirm('Reset all data?')) localStorage.removeItem(STORAGE_KEY), location.reload(); }},'Reset')
        ),
        e('div',{className:'mb-3'},
          e('div',{className:'d-inline-flex gap-2'}, 
            e('button',{className:'btn '+(state.scoring==='PPR'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'PPR'}))},'PPR'),
            e('button',{className:'btn '+(state.scoring==='STD'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'STD'}))},'Standard')
          )
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Roster size (for Max Bid)'),
          e('input',{type:'number',min:1,step:1,value:state.rosterSize,onChange:e=>setState(s=>({...s, rosterSize: Math.max(1, Number(e.target.value||16))})),className:'form-control'})
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Import FantasyPros CSV — PPR'),
          e('input',{type:'file',accept:'.csv',className:'form-control',onChange:ev=>importCSV('playersPPR',ev.target.files[0])}),
          e('div',{className:'small',style:{color:'var(--muted)'}}, state.playersPPR.length?('Loaded '+state.playersPPR.length+' players'):'No file loaded yet')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Import FantasyPros CSV — Standard'),
          e('input',{type:'file',accept:'.csv',className:'form-control',onChange:ev=>importCSV('playersSTD',ev.target.files[0])}),
          e('div',{className:'small',style:{color:'var(--muted)'}}, state.playersSTD.length?('Loaded '+state.playersSTD.length+' players'):'No file loaded yet')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Team Drawn From Hat'),
          e('select',{className:'form-select',value:state.selectedTeam,onChange:ev=>setState(s=>({...s,selectedTeam:ev.target.value}))},
            [e('option',{key:'',value:''},'All Teams')].concat(TEAMS.map(t=> e('option',{key:t.abbr,value:t.abbr},`${t.abbr} — ${t.name}`)))
          ),
          state.selectedTeam ? e('div',{className:'mt-2 chip'}, e(TeamLogo,{abbr:state.selectedTeam}), e('span',null,state.selectedTeam)) : e('div',{className:'mt-2', style:{color:'var(--muted)'}},'No team selected')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Position'),
          e('ul',{className:'nav nav-pills flex-wrap gap-1'},
            ['ALL','QB','RB','WR','TE','K','DEF'].map(pos =>
              e('li',{className:'nav-item',key:pos},
                e('button',{className:'nav-link '+(state.pos===pos?'active':''),onClick:()=>setState(s=>({...s,pos}))},pos)
              )
            )
          )
        ),
        e('div',{className:'mt-3'},
          e('div',{className:'panel-title mb-1'},'Other Managers'),
          state.teams.slice(1).map(t =>{
            const maxB = maxBidForTeam(t, state.drafted, t.id, state.rosterSize);
            return e('div',{key:t.id,className:'d-flex align-items-center justify-content-between mb-2 flex-wrap gap-2'},
              e('input',{className:'form-control form-control-sm',style:{width:'46%'},value:t.name,onChange:e2=>renameTeam(t.id, e2.target.value)}),
              e('input',{type:'number',min:0,step:1,className:'form-control form-control-sm',style:{width:'26%'},value:t.spent,onChange:e2=>setTeamBudget(t.id,e2.target.value)}),
              e('span',{className:'money small pill'}, 'Max $'+maxB)
            );
          })
        )
      )
    ),

    // Middle: roster table + Search
    e('div',{className:'col-12 col-lg-5'},
      e('div',{className:'panel p-3'},
        e('div',{className:'d-flex flex-wrap gap-2 justify-content-between align-items-center mb-2'},
          e('div',{className:'panel-title m-0 h5'}, state.selectedTeam ? ('Roster — '+(teamByAbbr(state.selectedTeam)?.name || state.selectedTeam)) : 'All Available Players'),
          e('input',{type:'search',className:'form-control search',placeholder:'Search players…',value:state.q,onChange:e2=>setState(s=>({...s,q:e2.target.value}))})
        ),
        e('div',{className:'d-flex justify-content-between mb-2'},
          e('span',{className:'small',style:{color:'var(--muted)'}}, roster.length+' players'),
          state.selectedTeam && e('span',{className:'small',style:{color:'var(--muted)'}}, 'Filter: ', state.pos)
        ),
        e('div',{className:'table-responsive',style:{maxHeight:'60vh',overflow:'auto', borderRadius:'12px'}},
          e('table',{className:'table table-sm align-middle'},
            e('thead',null, e('tr',null, e('th',null,'#'), e('th',null,'Player / Team / Pos'), e('th',null,'Actions'))),
            e('tbody',null, roster.map(p=> e(PlayerRow,{key:p.id+'-'+p.name,p})))
          )
        )
      )
    ),

    // Right: my roster + Export
    e('div',{className:'col-12 col-lg-3'},
      e('div',{className:'panel p-3 sticky'},
        e('div',{className:'panel-title mb-2'},'My Roster'),
        (myRoster.length===0) ? e('div',{style:{color:'var(--muted)'}},'No players yet') :
          e('ul',{className:'list-group mb-3', style:{borderRadius:'12px', overflow:'hidden'}},
            myRoster.map(p => e(DraftListItem,{key:p.uid, entry:p}))
          ),
        (function(){
          const mine = state.teams[0];
          const myMax = maxBidForTeam(mine, state.drafted, 0, state.rosterSize);
          return e('div',{className:'mt-2'},
            e('div',null,e('strong',null,mine.name)),
            e('div',null,'Spent: ',e('span',{className:'money'},'$'+Number(mine.spent||0).toFixed(0))),
            e('div',null,'Left: ',e('span',{className:'money'},'$'+Number(200-(mine.spent||0)).toFixed(0))),
            e('div',null,'Max Bid: ',e('span',{className:'money'},'$'+myMax))
          );
        })(),
        e('div',{className:'divider'}),
        e('button',{className:'btn btn-primary w-100',onClick:()=>exportDraftCSV()},'Export Draft CSV')
      )
    ),

    // Player Details modal with recommendation + positional tier
    state.detail && (function(){
      const p = state.detail;
      const rec = recommendationFor(p, currentPlayers); // {band,posRank,tier}
      const band = rec.band; const label = bandLabel(band);
      const bandClass = 'rec chip '+band;

      return e('div',{className:'modal show d-block',tabIndex:'-1',role:'dialog','aria-modal':'true'},
        e('div',{className:'modal-dialog modal-dialog-scrollable'},
          e('div',{className:'modal-content', style:{background:'var(--panel)', color:'#eaffec', borderColor:'var(--line)'}},
            e('div',{className:'modal-header'},
              e('div',null,
                e('div',{className:'h5 m-0'}, p.name),
                e('div',{className:'small', style:{color:'var(--muted)'}}, p.teamAbbr,' • ',p.pos)
              ),
              e('button',{type:'button',className:'btn-close',onClick:()=>setState(s=>({...s, detail:null})),'aria-label':'Close'})
            ),
            e('div',{className:'modal-body'},
              e('div',{className:'d-flex align-items-center gap-2 mb-3'},
                e(TeamLogo,{abbr:p.teamAbbr}),
                e('span',{className:bandClass}, 'Expert Signal: ', label)
              ),
              e('div',{className:'mb-2'},
                e('span',{className:'chip'}, 'Position Rank: ', rec.posRank?('#'+rec.posRank):'—'),
                rec.tier && e('span',{className:'chip ms-2'}, 'Tier: ', rec.tier)
              ),
              e('div',{className:'small', style:{color:'var(--muted)'}},
                'Overall Rank: ', p.rank,
                p.bye?` • Bye ${p.bye}`:'',
                p.sos?` • ${p.sos}`:'',
                p.ecrVsAdp?` • ECR vs ADP ${p.ecrVsAdp}`:'',
                p.avgDiff?` • Avg Diff ${p.avgDiff}`:'',
                p.pctOver?` • % Over ${p.pctOver}`:''
              )
            ),
            e('div',{className:'modal-footer d-flex justify-content-between align-items-center'},
              (function(){
                const mine = state.teams[0];
                const myMax = maxBidForTeam(mine, state.drafted, 0, state.rosterSize);
                return e('span',{className:'pill'},'My Max Bid: $'+myMax);
              })(),
              e(QuickDraft,{player:p,onDraft:(teamId,cost)=>draftPlayer(p,teamId,cost)})
            )
          )
        )
      );
    })(),

    // Edit Draft modal
    state.editDraft && (function(){
      const entry = state.editDraft;
      let newTeam = entry.draftedBy, newCost = entry.cost;
      return e('div',{className:'modal show d-block',tabIndex:'-1',role:'dialog','aria-modal':'true'},
        e('div',{className:'modal-dialog'},
          e('div',{className:'modal-content', style:{background:'var(--panel)', color:'#eaffec', borderColor:'var(--line)'}},
            e('div',{className:'modal-header'},
              e('h5',{className:'modal-title'}, 'Edit Draft — ', entry.name),
              e('button',{type:'button',className:'btn-close',onClick:()=>setState(s=>({...s, editDraft:null})),'aria-label':'Close'})
            ),
            e('div',{className:'modal-body'},
              e('div',{className:'mb-3'},
                e('label',{className:'form-label'},'Manager'),
                e('select',{defaultValue:entry.draftedBy,className:'form-select',onChange:ev=>{newTeam=Number(ev.target.value)}},
                  state.teams.map(t=> e('option',{key:t.id,value:t.id},t.name))
                )
              ),
              e('div',{className:'mb-3'},
                e('label',{className:'form-label'},'Amount ($)'),
                e('input',{type:'number',min:0,step:1,defaultValue:entry.cost,className:'form-control',onChange:ev=>{newCost=Number(ev.target.value||0)}})
              ),
              e('div',{className:'small', style:{color:'var(--muted)'}},'Saving will adjust team budgets automatically.')
            ),
            e('div',{className:'modal-footer'},
              e('button',{className:'btn btn-outline-light',onClick:()=>setState(s=>({...s, editDraft:null}))},'Cancel'),
              e('button',{className:'btn btn-primary',onClick:()=>applyEdit(entry.uid,newTeam,newCost)},'Save changes')
            )
          )
        )
      );
    })()
  );
}

ReactDOM.createRoot(document.getElementById('root')).render(e(App));
</script>
</body>
</html>
