<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Fantasy Auction Draft Tracker — FantasyPros CSV (RK/PLAYER NAME/POS)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <style>
    :root { --turf:#1e6b3a; --hash:#c2d9c4; }
    body { background:#0b1f12; color:#f5fff7; }
    .app-header{ background:linear-gradient(135deg,#1e6b3a 0%,#2f8f54 40%,#0f3e23 100%); border-bottom:4px solid var(--hash) }
    .card{ background:#0f2617; border-color:#204e30 }
    .table{ color:#eaffec }
    .table thead th{ color:#a6ecc0; border-color:#295f3c }
    .table tbody tr{ border-color:#204e30 }
    .form-control,.form-select{ background:#0b1f12; color:#dfffe9; border-color:#316848 }
    .muted{ color:#a6ccb8 }
    .sticky-topish{ position:sticky; top:.5rem; z-index:100 }
    .logo{ width:28px; height:28px; object-fit:contain; margin-right:.5rem; background:#fff; border-radius:4px }
    .helmet{ width:28px; height:22px; margin-right:.4rem; vertical-align:middle; display:none }
    .team-pill{ display:inline-flex; align-items:center; gap:.4rem; padding:.2rem .5rem; border-radius:999px; background:#113822; border:1px solid #2a6a44 }
    .drafted{ opacity:.55; text-decoration:line-through }
    .money{ font-variant-numeric:tabular-nums }
    .linkish{ text-decoration:underline dotted; cursor:pointer }
    .pos-badge{ background:#16472b; border:1px solid #2f8f54 }
    .modal-content{ background:#0f2617; color:#eaffec; border-color:#204e30 }
    .btn-primary{ background:#2a6a44; border-color:#408a5c }
    .btn-outline-light{ border-color:#4aa173 }
  </style>
</head>
<body>
<header class="app-header py-3 mb-3">
  <div class="container d-flex justify-content-between align-items-center">
    <h1 class="h4 m-0">Fantasy Auction Draft Tracker</h1>
    <div class="small text-end">
      <div>Draft Day: <strong>Aug 17</strong></div>
      <div class="muted">Import FantasyPros CSV → pick team → draft</div>
    </div>
  </div>
</header>

<main class="container" id="root"></main>

<script>
const e = React.createElement;
const {useState,useEffect,useMemo} = React;

const STORAGE_KEY = 'auction_tracker_fp_custom_headers_v1';

// ESPN logo codes
const LOGO_CODE = {
  ARI:'ari', ATL:'atl', BAL:'bal', BUF:'buf', CAR:'car', CHI:'chi', CIN:'cin', CLE:'cle',
  DAL:'dal', DEN:'den', DET:'det', GBP:'gb', HOU:'hou', IND:'ind', JAX:'jax', KC:'kc',
  LV:'lv', LAC:'lac', LAR:'lar', MIA:'mia', MIN:'min', NE:'ne', NO:'no', NYG:'nyg',
  NYJ:'nyj', PHI:'phi', PIT:'pit', SF:'sf', SEA:'sea', TB:'tb', TEN:'ten', WAS:'wsh'
};
const TEAMS = [
  {abbr:'ARI',name:'Arizona Cardinals',color:'#97233F'},
  {abbr:'ATL',name:'Atlanta Falcons',color:'#A71930'},
  {abbr:'BAL',name:'Baltimore Ravens',color:'#241773'},
  {abbr:'BUF',name:'Buffalo Bills',color:'#00338D'},
  {abbr:'CAR',name:'Carolina Panthers',color:'#0085CA'},
  {abbr:'CHI',name:'Chicago Bears',color:'#0B162A'},
  {abbr:'CIN',name:'Cincinnati Bengals',color:'#FB4F14'},
  {abbr:'CLE',name:'Cleveland Browns',color:'#311D00'},
  {abbr:'DAL',name:'Dallas Cowboys',color:'#041E42'},
  {abbr:'DEN',name:'Denver Broncos',color:'#FB4F14'},
  {abbr:'DET',name:'Detroit Lions',color:'#0076B6'},
  {abbr:'GBP',name:'Green Bay Packers',color:'#203731'},
  {abbr:'HOU',name:'Houston Texans',color:'#03202F'},
  {abbr:'IND',name:'Indianapolis Colts',color:'#002C5F'},
  {abbr:'JAX',name:'Jacksonville Jaguars',color:'#006778'},
  {abbr:'KC', name:'Kansas City Chiefs',color:'#E31837'},
  {abbr:'LV', name:'Las Vegas Raiders',color:'#000000'},
  {abbr:'LAC',name:'Los Angeles Chargers',color:'#0080C6'},
  {abbr:'LAR',name:'Los Angeles Rams',color:'#003594'},
  {abbr:'MIA',name:'Miami Dolphins',color:'#008E97'},
  {abbr:'MIN',name:'Minnesota Vikings',color:'#4F2683'},
  {abbr:'NE', name:'New England Patriots',color:'#002244'},
  {abbr:'NO', name:'New Orleans Saints',color:'#D3BC8D'},
  {abbr:'NYG',name:'New York Giants',color:'#0B2265'},
  {abbr:'NYJ',name:'New York Jets',color:'#125740'},
  {abbr:'PHI',name:'Philadelphia Eagles',color:'#004C54'},
  {abbr:'PIT',name:'Pittsburgh Steelers',color:'#FFB612'},
  {abbr:'SF', name:'San Francisco 49ers',color:'#AA0000'},
  {abbr:'SEA',name:'Seattle Seahawks',color:'#002244'},
  {abbr:'TB', name:'Tampa Bay Buccaneers',color:'#D50A0A'},
  {abbr:'TEN',name:'Tennessee Titans',color:'#4B92DB'},
  {abbr:'WAS',name:'Washington Commanders',color:'#5A1414'},
];

function teamByAbbr(a){ return TEAMS.find(t=>t.abbr===a); }
function Helmet({color='#888',text=''}) {
  return e('svg',{className:'helmet',viewBox:'0 0 64 48',xmlns:'http://www.w3.org/2000/svg',role:'img','aria-label':text+' helmet'},
    e('path',{fill:'#0b1f12',d:'M6 34h12l5 5-3 4H9a3 3 0 0 1-3-3v-6z'}),
    e('circle',{cx:28,cy:22,r:20,fill:color,stroke:'#c2d9c4','stroke-width':2}),
    e('text',{x:28,y:26,'text-anchor':'middle','font-size':'12',fill:'#ffffff','font-weight':'700'},text.slice(0,3))
  );
}
function TeamLogo({abbr}) {
  const code=LOGO_CODE[abbr]||abbr.toLowerCase();
  const url=`https://a.espncdn.com/i/teamlogos/nfl/500/${code}.png`;
  const t=teamByAbbr(abbr)||{color:'#666'};
  return e('span',{className:'d-inline-flex align-items-center'},
    e('img',{className:'logo',alt:abbr+' logo',src:url,onError:(ev)=>{ev.currentTarget.style.display='none';ev.currentTarget.nextSibling.style.display='inline-block';}}),
    e(Helmet,{color:t.color,text:abbr})
  );
}

function useStoredState(initial){
  const [state,setState]=useState(()=>{const raw=localStorage.getItem(STORAGE_KEY); if(!raw) return initial; try{return JSON.parse(raw)}catch(_){return initial}});
  useEffect(()=>localStorage.setItem(STORAGE_KEY,JSON.stringify(state)),[state]);
  return [state,setState];
}
function initialState(){
  return {
    scoring:'PPR',
    playersPPR:[], playersSTD:[],
    selectedTeam:'',
    pos:'ALL',
    teams:Array.from({length:10},(_,i)=>({id:i,name:i===0?'My Team':('Team '+(i+1)),spent:0,budget:200})),
    drafted:[],
    notes:{}
  };
}

// === Parsing that matches your CSV headers ===
function normalizePos(pos){
  if(!pos) return 'N/A';
  const p = String(pos).toUpperCase().trim();
  // Strip trailing digits (WR1 -> WR), handle DST->DEF
  return p.replace(/[0-9]+$/,'').replace('DST','DEF');
}
function parseFPRowFlexible(r, idx){
  // Trim keys like "AVG. DIFF " -> "AVG. DIFF"
  const obj = {};
  for (const k in r) obj[(k||'').trim()] = r[k];

  const name = (obj['PLAYER NAME'] || obj['Player'] || obj['PLAYER'] || '').toString().trim();
  const team = (obj['TEAM'] || obj['Team'] || obj['NFL Team'] || obj['Tm'] || '').toString().trim().toUpperCase();
  const pos  = normalizePos(obj['POS'] || obj['Pos'] || obj['Position'] || '');
  const rk   = Number(obj['RK'] || obj['Rk'] || obj['Rank'] || obj['Overall'] || idx+1);
  const bye  = (obj['BYE'] || obj['Bye'] || obj['Bye Week'] || '').toString().trim();
  const sos  = (obj['SOS'] || '').toString().trim();
  const ecrVsAdp = (obj['ECR VS ADP'] || obj['ECR vs ADP'] || '').toString().trim();
  const avgDiff  = (obj['AVG. DIFF'] || obj['AVG. DIFF '] || '').toString().trim();
  const pctOver  = (obj['% OVER'] || obj['% OVER '] || '').toString().trim();

  if(!name) return null;

  // Handle common alternative team codes
  let abbr = team;
  if (abbr === 'GB') abbr = 'GBP';
  if (abbr === 'JAC') abbr = 'JAX';
  if (abbr === 'LVR') abbr = 'LV';
  if (abbr === 'LA')  abbr = 'LAR';
  if (abbr === 'WSH') abbr = 'WAS';

  return {
    id: idx,
    name,
    teamAbbr: abbr,
    pos,
    rank: rk,
    bye,
    sos,
    ecrVsAdp,
    avgDiff,
    pctOver,
    draftedBy: null,
    cost: null
  };
}

function App(){
  const [state,setState]=useStoredState(initialState());
  const [detail,setDetail]=useState(null);

  const currentPlayers = useMemo(()=> state.scoring==='PPR' ? state.playersPPR : state.playersSTD, [state.scoring,state.playersPPR,state.playersSTD]);

  const roster = useMemo(()=>{
    const list = currentPlayers.filter(p => !p.draftedBy && (!state.selectedTeam || p.teamAbbr===state.selectedTeam));
    return list.filter(p => state.pos==='ALL' || p.pos===state.pos).sort((a,b)=> (a.rank||9999)-(b.rank||9999));
  },[currentPlayers,state.selectedTeam,state.pos]);

  const myRoster = useMemo(()=> state.drafted.filter(p=>p.draftedBy===0), [state.drafted]);

  function importCSV(which,file){
    if(!file) return;
    Papa.parse(file,{
      header:true, skipEmptyLines:true,
      transformHeader: h => (h||'').trim(), // trims headers like "AVG. DIFF "
      complete: (res) => {
        const players = res.data.map(parseFPRowFlexible).filter(Boolean).sort((a,b)=> (a.rank||9999)-(b.rank||9999));
        setState(s => ({...s, [which]: players}));
      }
    });
  }

  function setTeamBudget(teamId, spent){
    setState(s=>{
      const teams = s.teams.map(t => t.id===teamId? {...t, spent:Number(spent||0), budget:Number((200-Number(spent||0)).toFixed(2))}:t);
      return {...s,teams};
    });
  }

  function draftPlayer(p, teamId, cost){
    setState(s=>{
      const mapDraft = list => list.map(x => (x.id===p.id && x.name===p.name) ? {...x, draftedBy:teamId, cost:Number(cost)} : x);
      const playersPPR = s.playersPPR.length ? mapDraft(s.playersPPR) : s.playersPPR;
      const playersSTD = s.playersSTD.length ? mapDraft(s.playersSTD) : s.playersSTD;
      const drafted = s.drafted.concat([{...p, draftedBy:teamId, cost:Number(cost)}]);
      const teams = s.teams.map(t => t.id===teamId ? {...t, spent:Number((t.spent+Number(cost)).toFixed(2)), budget:Number((200-(t.spent+Number(cost))).toFixed(2))} : t);
      return {...s, playersPPR, playersSTD, drafted, teams};
    });
    setDetail(null);
  }

  function undoDraft(p){
    setState(s=>{
      const drafted = s.drafted.filter(x => !(x.id===p.id && x.name===p.name && x.draftedBy===p.draftedBy));
      const mapUndo = list => list.map(x => (x.id===p.id && x.name===p.name) ? {...x, draftedBy:null, cost:null} : x);
      const playersPPR = mapUndo(s.playersPPR);
      const playersSTD = mapUndo(s.playersSTD);
      const teams = s.teams.map(t => t.id===p.draftedBy ? {...t, spent:Number((t.spent-(p.cost||0)).toFixed(2)), budget:Number((200-(t.spent-(p.cost||0))).toFixed(2))} : t);
      return {...s, drafted, playersPPR, playersSTD, teams};
    });
  }

  function PlayerRow({p}){
    return e('tr',{className:p.draftedBy!=null?'drafted':''},
      e('td',null,p.rank),
      e('td',null,
        e('div',{className:'d-flex align-items-center'},
          e(TeamLogo,{abbr:p.teamAbbr}),
          e('div',null,
            e('div',null,p.name,' ', e('span',{className:'badge rounded-pill pos-badge ms-1'},p.pos)),
            e('div',{className:'small muted'}, p.teamAbbr, p.bye?` • Bye ${p.bye}`:'', p.sos?` • ${p.sos}`:'')
          )
        )
      ),
      e('td',null,
        p.draftedBy==null
          ? e('div',{className:'d-flex gap-2'},
              e('button',{className:'btn btn-sm btn-outline-light',onClick:()=>setDetail(p)},'Details'),
              e(QuickDraft,{player:p,onDraft:(teamId,cost)=>draftPlayer(p,teamId,cost)})
            )
          : e('span',null,'Taken • $',Number(p.cost).toFixed(0))
      )
    );
  }

  function QuickDraft({player,onDraft}){
    const [teamId,setTeamId]=useState(0);
    const [cost,setCost]=useState(1);
    const disabled = state.teams.find(t=>t.id===teamId)?.budget < cost;
    return e('div',{className:'d-flex align-items-center gap-2'},
      e('select',{className:'form-select form-select-sm',style:{width:'120px'},value:teamId,onChange:e=>setTeamId(Number(e.target.value))},
        state.teams.map(t=> e('option',{key:t.id,value:t.id},t.name))
      ),
      e('input',{type:'number',min:0,step:1,value:cost,onChange:e=>setCost(Number(e.target.value||0)),className:'form-control form-control-sm',style:{width:'80px'}}),
      e('button',{className:'btn btn-sm btn-primary',disabled,onClick:()=>onDraft(teamId,cost)}, disabled?'$ low':'Draft')
    );
  }

  return e('div',{className:'row g-3'},
    // Left controls
    e('div',{className:'col-12 col-lg-4'},
      e('div',{className:'card p-3 sticky-topish'},
        e('div',{className:'d-flex justify-content-between align-items-center mb-2'},
          e('h5',{className:'m-0'},'Setup & Filters'),
          e('button',{className:'btn btn-sm btn-outline-light',onClick:()=>{ if(confirm('Reset all data?')) localStorage.removeItem(STORAGE_KEY), location.reload(); }},'Reset')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Scoring'),
          e('div',{className:'d-flex gap-2'},
            e('button',{className:'btn btn-sm '+(state.scoring==='PPR'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'PPR'}))},'PPR'),
            e('button',{className:'btn btn-sm '+(state.scoring==='STD'?'btn-primary':'btn-outline-light'),onClick:()=>setState(s=>({...s,scoring:'STD'}))},'Standard')
          )
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Import FantasyPros CSV — PPR'),
          e('input',{type:'file',accept:'.csv',className:'form-control',onChange:ev=>importCSV('playersPPR',ev.target.files[0])}),
          e('div',{className:'small muted mt-1'}, state.playersPPR.length?('Loaded '+state.playersPPR.length+' players'):'No file loaded yet')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Import FantasyPros CSV — Standard'),
          e('input',{type:'file',accept:'.csv',className:'form-control',onChange:ev=>importCSV('playersSTD',ev.target.files[0])}),
          e('div',{className:'small muted mt-1'}, state.playersSTD.length?('Loaded '+state.playersSTD.length+' players'):'No file loaded yet')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Team Drawn From Hat'),
          e('select',{className:'form-select',value:state.selectedTeam,onChange:ev=>setState(s=>({...s,selectedTeam:ev.target.value}))},
            [e('option',{key:'',value:''},'All Teams')].concat(TEAMS.map(t=> e('option',{key:t.abbr,value:t.abbr},`${t.abbr} — ${t.name}`)))
          ),
          state.selectedTeam ? e('div',{className:'mt-2 team-pill'}, e(TeamLogo,{abbr:state.selectedTeam}), e('span',null,state.selectedTeam)) : e('div',{className:'mt-2 muted'},'No team selected')
        ),
        e('div',{className:'mb-3'},
          e('label',{className:'form-label'},'Position'),
          e('ul',{className:'nav nav-pills flex-wrap gap-1'},
            ['ALL','QB','RB','WR','TE','K','DEF'].map(pos =>
              e('li',{className:'nav-item',key:pos},
                e('button',{className:'nav-link '+(state.pos===pos?'active':''),onClick:()=>setState(s=>({...s,pos}))},pos)
              )
            )
          )
        ),
        e('div',{className:'mt-3'},
          e('h6',null,'Other Managers (budgets)'),
          state.teams.slice(1).map(t =>
            e('div',{key:t.id,className:'d-flex align-items-center justify-content-between mb-2'},
              e('input',{className:'form-control form-control-sm',style:{width:'55%'},value:t.name,onChange:e2=>setState(s=>{const teams=s.teams.map(tt=>tt.id===t.id?{...tt,name:e2.target.value}:tt); return {...s,teams};})}),
              e('input',{type:'number',min:0,step:1,className:'form-control form-control-sm',style:{width:'30%'},value:t.spent,onChange:e2=>setTeamBudget(t.id,e2.target.value)}),
              e('span',{className:'money small'},'$'+(200-(t.spent||0)))
            )
          )
        )
      )
    ),

    // Middle: roster table
    e('div',{className:'col-12 col-lg-5'},
      e('div',{className:'card p-3'},
        e('div',{className:'d-flex justify-content-between align-items-center mb-2'},
          e('h5',{className:'m-0'}, state.selectedTeam ? ('Roster — '+(teamByAbbr(state.selectedTeam)?.name || state.selectedTeam)) : 'All Available Players'),
          e('span',{className:'small muted'}, roster.length+' players')
        ),
        e('div',{className:'table-responsive',style:{maxHeight:'60vh',overflow:'auto'}},
          e('table',{className:'table table-sm align-middle'},
            e('thead',null, e('tr',null, e('th',null,'#'), e('th',null,'Player / Team / Pos'), e('th',null,'Actions'))),
            e('tbody',null, roster.map(p=> e(PlayerRow,{key:p.id+'-'+p.name,p})))
          )
        )
      )
    ),

    // Right: my roster
    e('div',{className:'col-12 col-lg-3'},
      e('div',{className:'card p-3 sticky-topish'},
        e('h5',null,'My Roster'),
        myRoster.length===0 ? e('div',{className:'muted'},'No players yet') :
          e('ul',{className:'list-group mb-3'},
            myRoster.map(p =>
              e('li',{key:p.id+'-'+p.name,className:'list-group-item d-flex justify-content-between align-items-center'},
                e('span',null,p.name,' ',e('span',{className:'badge rounded-pill pos-badge ms-2'},p.pos)),
                e('span',null,
                  e('span',{className:'money me-2'},'$'+Number(p.cost||0).toFixed(0)),
                  e('span',{className:'linkish',onClick:()=>undoDraft(p)},'Undo')
                )
              )
            )
          ),
        e('div',{className:'mt-2'},
          e('div',null,e('strong',null,state.teams[0].name)),
          e('div',null,'Spent: ',e('span',{className:'money'},'$'+Number(state.teams[0].spent||0).toFixed(0))),
          e('div',null,'Left: ',e('span',{className:'money'},'$'+Number(200-(state.teams[0].spent||0)).toFixed(0)))
        )
      )
    ),

    // Player Details Modal
    detail && e(DetailsModal,{player:detail,onClose:()=>setDetail(null),onDraft:draftPlayer})
  );
}

function DetailsModal({player,onClose,onDraft}){
  const [teamId,setTeamId]=React.useState(0);
  const [cost,setCost]=React.useState(1);
  return e('div',{className:'modal show d-block',tabIndex:'-1',role:'dialog','aria-modal':'true'},
    e('div',{className:'modal-dialog modal-dialog-scrollable'},
      e('div',{className:'modal-content'},
        e('div',{className:'modal-header'},
          e('h5',{className:'modal-title'}, player.name),
          e('button',{type:'button',className:'btn-close',onClick:onClose,'aria-label':'Close'})
        ),
        e('div',{className:'modal-body'},
          e('div',{className:'d-flex align-items-center mb-3'},
            e(TeamLogo,{abbr:player.teamAbbr}),
            e('div',null,
              e('div',null, player.teamAbbr,' • ',player.pos),
              e('div',{className:'small muted'},
                'Rank: ',player.rank,
                player.bye?` • Bye ${player.bye}`:'',
                player.sos?` • ${player.sos}`:'',
                player.ecrVsAdp?` • ECR vs ADP ${player.ecrVsAdp}`:'',
                player.avgDiff?` • Avg Diff ${player.avgDiff}`:'',
                player.pctOver?` • % Over ${player.pctOver}`:''
              )
            )
          ),
          e('div',{className:'small muted'},'Tip: we can auto-pull FantasyPros outlooks later via Cloudflare Worker; for now, paste notes into your phone’s Notes if you want them handy.')
        ),
        e('div',{className:'modal-footer d-flex justify-content-between align-items-center'},
          e('div',{className:'d-flex align-items-center gap-2'},
            e('select',{className:'form-select form-select-sm',style:{width:'140px'},value:teamId,onChange:e=>setTeamId(Number(e.target.value))},
              Array.from({length:10},(_,i)=> e('option',{key:i,value:i}, i===0?'My Team':'Team '+(i+1)))
            ),
            e('input',{type:'number',min:0,step:1,value:cost,onChange:e=>setCost(Number(e.target.value||0)),className:'form-control form-control-sm',style:{width:'80px'}})
          ),
          e('button',{className:'btn btn-primary',onClick:()=>onDraft(player,teamId,cost)},'Draft')
        )
      )
    )
  );
}

ReactDOM.createRoot(document.getElementById('root')).render(e(App));
</script>
</body>
</html>
