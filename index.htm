<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Fantasy Draft Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: #121212;
      color: #f1f1f1;
    }
    header {
      background-color: #222;
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    header h1 {
      margin: 0;
      font-size: 20px;
    }
    nav a {
      color: #f1f1f1;
      margin-left: 15px;
      text-decoration: none;
    }
    nav a:hover {
      text-decoration: underline;
    }
    .container {
      padding: 20px;
    }
    .hidden {
      display: none;
    }
  </style>
  <style>
  /* ===== Modern UI bits (adds onto Part 1 styles) ===== */
  .bar { display:flex; gap:10px; flex-wrap:wrap; align-items:center; }
  .chip { padding:6px 10px; border-radius:999px; border:1px solid #2c4a59; background:#0d1b22; color:#eaf7ff; font-weight:700; cursor:pointer; }
  .chip.active { background:#1e3a46; border-color:#4ea7c6; }
  .panel { background:#0d1215; border:1px solid #2a3a44; border-radius:12px; padding:12px; }
  .panel h3 { margin:0 0 8px 0; font-size:16px; }

  .cards { display:grid; grid-template-columns:repeat(auto-fit,minmax(280px,1fr)); gap:10px; }
  .card { background:#11181d; border:1px solid #2a3a44; border-radius:12px; padding:10px; }
  .row-drafted { opacity:.45; filter:grayscale(.4); pointer-events:none; }
  .title { display:flex; align-items:center; gap:8px; font-weight:800; }
  .meta { color:#b9c7cf; font-size:12px; }
  .badge-pos { background:#112730; border:1px solid #2b6a67; border-radius:999px; padding:2px 6px; font-size:12px; font-weight:700; }
  .sos { display:inline-flex; align-items:center; gap:6px; border:1px solid #385b6a; background:#0b1c23; border-radius:999px; padding:2px 8px; font-size:12px; }
  .stars { letter-spacing:.5px; }
  .band { padding:2px 8px; border-radius:999px; font-weight:800; border:1px solid transparent; font-size:12px; }
  .band.high{ color:#052916; background:rgba(68,226,138,.85); border-color:#38c172 }
  .band.medium{ color:#2d2000; background:rgba(255,209,102,.9); border-color:#e0b548 }
  .band.low{ color:#061a39; background:rgba(134,182,255,.9); border-color:#5b8ed6 }
  .band.other{ color:#0c1921; background:rgba(154,170,188,.75); border-color:#8b9aaa }

  .money { font-variant-numeric: tabular-nums; }
  .btn { background:#2bb673; border:none; color:#062312; padding:6px 10px; border-radius:8px; font-weight:800; cursor:pointer; }
  .btn[disabled] { opacity:.5; cursor:not-allowed; }
  .btn-ghost { background:#0d1b22; color:#eaf7ff; border:1px solid #2c4a59; }
  .btn-danger { background:#9c2b2b; color:#fff; }
  .input, .select {
    background:#0a1216; color:#f1f1f1; border:1px solid #2c4a59; border-radius:10px; padding:8px 10px;
  }

  .icon { display:inline-flex; align-items:center; justify-content:center; width:22px; height:22px; border-radius:6px; font-size:13px; }
  .icon-injury { background:#3a1010; color:#ffb5b5; border:1px solid #8a3a3a; }
  .icon-sleeper { background:#131f33; color:#9ac8ff; border:1px solid #3a5c8a; }
  .icon-bust { background:#2a1a0a; color:#ffd9a1; border:1px solid #7a4a1a; }

  .table { width:100%; border-collapse:collapse; }
  .table th, .table td { border-bottom:1px solid #2a3a44; padding:8px; text-align:left; }
  .table th { color:#dff0f7; background:#0c1a20; }

  .muted { color:#9cb0bb; }
  .flex { display:flex; gap:10px; align-items:center; }
  .space { height:10px; }

  /* collapsible helper */
  .hidden { display:none; }

  /* small responsive tweaks */
  @media (max-width:700px){
    nav a { display:inline-block; margin:6px 6px 0 0; }
  }
</style>
</head>
<script>
/* ========= Global app state ========= */
const MIN_BID = 0.5;
const DEFAULT_ROSTER_SIZE = 16;
const POSITIONS = ['QB','RB','WR','TE','K','DEF'];
const TIERS = [
  {label:'Top 5',min:1,max:5},
  {label:'6–10',min:6,max:10},
  {label:'11–15',min:11,max:15},
  {label:'16–20',min:16,max:20},
  {label:'21–30',min:21,max:30},
  {label:'31–40',min:31,max:40},
  {label:'41+',min:41,max:9999}
];

const state = {
  view: 'draft',
  scoring: 'PPR',
  rosterSize: DEFAULT_ROSTER_SIZE,
  targets: {QB:1,RB:2,WR:2,TE:1,FLEX:1,K:1,DEF:1,BN:8},
  players: { PPR: [], STD: [] },        // loaded players
  sosMap: {},                           // {TEAM: {POS: {stars, blurb}}}
  participants: Array.from({length:10},(_,i)=> i===0 ? 'My Team' : `Team ${i+1}`),
  leagues: {
    PPR: {teams: [], drafted: []},
    STD: {teams: [], drafted: []}
  },
  filters: { team:'', pos:'ALL', q:'' },
  draftedView: 'last3',
  draftedCollapsed: true,
  rosterCollapsed: false,
  injuriesByPlayer: {}, // optional (from insights.json)
  tagsByPlayer: {}      // optional (from insights.json)
};

function initTeams(){
  ['PPR','STD'].forEach((lg,k)=>{
    state.leagues[lg].teams = Array.from({length:10},(_,i)=>({
      id: i, name: state.participants[i], spent: 0, budget: 200
    }));
  });
}
initTeams();

/* ========= Helpers ========= */
function $(id){ return document.getElementById(id); }
function uid(){ return Date.now().toString(36)+Math.random().toString(36).slice(2,8); }
function rankBand(r){
  if (r==null) return 'other';
  if (r<=10) return 'high';
  if (r<=20) return 'medium';
  if (r<=30) return 'low';
  return 'other';
}
function starsTxt(n){ const x=Math.max(0,Math.min(5,n||0)); return '★'.repeat(x)+'☆'.repeat(5-x); }
function computePosRank(p,list){
  const same=list.filter(x=>x.pos===p.pos).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
  const idx = same.findIndex(x=>x.name===p.name && x.teamAbbr===p.teamAbbr);
  return idx<0?null:(idx+1);
}
function tierForRank(r){
  if (r==null) return '41+';
  for (const t of TIERS){ if(r>=t.min && r<=t.max) return t.label; }
  return '41+';
}
function countDraftedByTeam(drafted, teamId){
  return drafted.reduce((n,p)=> n+(p.draftedBy===teamId?1:0), 0);
}
function countsByPosForTeam(drafted, teamId){
  const c = {QB:0,RB:0,WR:0,TE:0,K:0,DEF:0};
  drafted.forEach(d=>{ if(d.draftedBy===teamId && c[d.pos]!=null) c[d.pos]++; });
  return c;
}
function maxBidForTeam(team, drafted, teamId, rosterSize){
  const draftedCt = countDraftedByTeam(drafted, teamId);
  const slotsLeft = Math.max(rosterSize-draftedCt,0);
  const reserve = Math.max(slotsLeft-1,0)*MIN_BID;
  const avail = (team?.budget??0)-reserve;
  return Number(Math.max(avail,0).toFixed(2));
}

/* ========= Routing ========= */
function showPage(id){
  ['draft','roster','managers','settings'].forEach(p=>{
    $(p).classList.add('hidden');
  });
  $(id).classList.remove('hidden');
  state.view=id;
  if (id==='draft'){ renderDraft(); }
  if (id==='roster'){ renderRoster(); }
  if (id==='managers'){ renderManagers(); }
  if (id==='settings'){ renderSettings(); }
}
function setScoring(mode){
  state.scoring = (mode==='STD')?'STD':'PPR';
  $('#btnPPR')?.classList.toggle('active', state.scoring==='PPR');
  $('#btnSTD')?.classList.toggle('active', state.scoring==='STD');
  $('#defPPR')?.classList.toggle('active', state.scoring==='PPR');
  $('#defSTD')?.classList.toggle('active', state.scoring==='STD');
  renderDraft();
}

/* ========= Filters & Search ========= */
function populateTeamFilter(){
  const sel = $('#filterTeam');
  const teams = [...new Set(state.players[state.scoring].map(p=>p.teamAbbr))].sort();
  sel.innerHTML = `<option value="">All Teams</option>` + teams.map(t=>`<option>${t}</option>`).join('');
  sel.value = state.filters.team || '';
}
function onFilterChange(){
  state.filters.team = $('#filterTeam').value;
  state.filters.pos = $('#filterPos').value;
  renderDraft();
}
function onSearchInput(v){
  state.filters.q = v.trim().toLowerCase();
  renderDraft();
}

/* ========= Rendering: Draft ========= */
function renderDraft(){
  // title + budget + max bid
  const lg = state.leagues[state.scoring];
  const me = lg.teams[0];
  $('#myBudget').textContent = '$' + Number(200-(me.spent||0)).toFixed(2);
  $('#myMaxBid').textContent = '$' + maxBidForTeam(me, lg.drafted, 0, state.rosterSize).toFixed(2);

  // filters
  populateTeamFilter();
  $('#filterPos').value = state.filters.pos;

  // build playable list
  const list = state.players[state.scoring];
  const team = state.filters.team;
  const pos = state.filters.pos;
  const q = state.filters.q;

  let view = list.slice();
  if (team) view = view.filter(p=>p.teamAbbr===team);
  if (pos && pos!=='ALL') view = view.filter(p=>p.pos===pos);
  if (q) view = view.filter(p=> p.name.toLowerCase().includes(q) || p.teamAbbr.toLowerCase().includes(q) || p.pos.toLowerCase().includes(q) );

  // sort: available first, then pos rank
  view = view.sort((a,b)=>{
    const ad=!!a.draftedBy, bd=!!b.draftedBy;
    if (ad!==bd) return ad?1:-1;
    const ar=computePosRank(a,list)||9999, br=computePosRank(b,list)||9999;
    return ar-br;
  });

  $('#playersTitle').textContent = team ? `Roster — ${team}` : 'All Available Players';

  const cards = view.map(p=>{
    const drafted = p.draftedBy!=null;
    const pr = computePosRank(p,list);
    const b = rankBand(pr);
    const sos = state.sosMap?.[p.teamAbbr]?.[p.pos];
    const mgr = drafted ? (lg.teams.find(t=>t.id===p.draftedBy)?.name || ('Team '+(p.draftedBy+1))) : '';

    return `
      <div class="card ${drafted?'row-drafted':''}">
        <div class="title"><span class="band ${b}">${pr?('#'+pr):'—'}</span> ${p.name} <span class="badge-pos">${p.pos}</span></div>
        <div class="meta">${p.teamAbbr} ${p.bye?('• Bye '+p.bye):''}</div>
        <div class="space"></div>
        <div class="flex">
          ${sos && typeof sos.stars==='number' ? `<span class="sos"><span class="stars">${starsTxt(sos.stars)}</span>SoS</span>`:''}
          ${drafted ? `<span class="muted">Drafted by ${mgr} • <span class="money">$${Number(p.cost||0).toFixed(2)}</span></span>`:''}
        </div>
        <div class="space"></div>
        <div class="flex" style="flex-wrap:wrap">
          ${drafted ? '' : quickDraftHTML(p)}
          <button class="btn-ghost btn" onclick="openDetails('${escapeId(p)}')">Details</button>
        </div>
      </div>
    `;
  }).join('');

  $('#playersList').innerHTML = cards || `<div class="muted">No players match your filters. Try loading sample data in Settings if you haven't imported CSVs yet.</div>`;

  // drafted panel summary
  renderDraftedBox();
}
function escapeId(p){ return btoa(unescape(encodeURIComponent([p.id,p.name,p.teamAbbr].join('|')))); }
function findByEscId(esc){
  try{
    const [id,name,team] = decodeURIComponent(escape(atob(esc))).split('|');
    const list = state.players[state.scoring];
    return list.find(x=> String(x.id)===id && x.name===name && x.teamAbbr===team);
  }catch(_){ return null; }
}
function quickDraftHTML(p){
  const teams = state.leagues[state.scoring].teams.map(t=>`<option value="${t.id}">${t.name}</option>`).join('');
  return `
    <select class="select" id="qd-team-${p.id}">${teams}</select>
    <input class="input" id="qd-amt-${p.id}" type="number" inputmode="decimal" step="0.5" placeholder="$" onfocus="this.select()">
    <button class="btn" onclick="quickDraft('${escapeId(p)}')">Draft</button>
  `;
}
function quickDraft(escId){
  const p = findByEscId(escId); if(!p) return;
  const teamSel = $('#qd-team-'+p.id); const amtInput = $('#qd-amt-'+p.id);
  const teamId = Number(teamSel.value);
  const amt = Number(amtInput.value);
  if (isNaN(amt) || ((amt*2)%1)!==0 || amt<MIN_BID) { alert('Amount must be at least $0.50 in $0.50 steps'); return; }
  const lg = state.leagues[state.scoring];
  const sel = lg.teams.find(t=>t.id===teamId);
  const mb = maxBidForTeam(sel, lg.drafted, teamId, state.rosterSize);
  if (amt>mb) { alert(`Max bid for ${sel.name} is $${mb.toFixed(2)}`); return; }
  // Apply draft
  const entry = {...p, uid:uid(), draftedBy:teamId, cost:amt, ts:new Date().toISOString()};
  lg.drafted.push(entry);
  // mark on players list
  const list = state.players[state.scoring];
  const idx = list.findIndex(x=>x.id===p.id && x.name===p.name);
  if (idx>=0){ list[idx]= {...list[idx], draftedBy:teamId, cost:amt}; }
  // budgets
  lg.teams = lg.teams.map(t=> t.id===teamId ? {...t, spent:Number((t.spent+amt).toFixed(2)), budget:Number((200-(t.spent+amt)).toFixed(2))} : t );
  renderDraft();
}

/* ========= Drafted panel ========= */
function setDraftedView(v){ state.draftedView=v; state.draftedCollapsed=false; renderDraftedBox(); }
function toggleDraftedCollapse(){ state.draftedCollapsed = !state.draftedCollapsed; renderDraftedBox(); }
function renderDraftedBox(){
  const box = $('#draftedBox');
  const note = $('#draftedCollapsedNote');
  if (state.draftedCollapsed){ box.classList.add('hidden'); note.classList.remove('hidden'); return; }
  box.classList.remove('hidden'); note.classList.add('hidden');

  const lg = state.leagues[state.scoring];
  const sorted = [...lg.drafted].sort((a,b)=> new Date(b.ts||0)-new Date(a.ts||0));
  const shown = state.draftedView==='last3' ? sorted.slice(0,3) : state.draftedView==='last10' ? sorted.slice(0,10) : sorted;
  if (!shown.length){ $('#draftedList').innerHTML = `<div class="muted">No picks yet</div>`; return; }
  const rows = shown.map(d=>{
    const mgr = lg.teams.find(t=>t.id===d.draftedBy)?.name || ('Team '+(d.draftedBy+1));
    const list = state.players[state.scoring];
    const pr = computePosRank(d, list); const b = rankBand(pr);
    const undoText = `Undo pick?\n\n${d.name} (${d.pos}, ${d.teamAbbr})\nPos Rank: ${pr?('#'+pr):'—'}\nCost: $${Number(d.cost||0).toFixed(2)}\nManager: ${mgr}`;
    return `
      <div class="flex" style="justify-content:space-between; border-bottom:1px solid #2a3a44; padding:8px 0">
        <div>
          <span class="band ${b}">${pr?('#'+pr):'—'}</span>
          <b>${d.name}</b>
          <span class="muted">• ${d.teamAbbr} • Bye ${d.bye||'—'} • ${mgr}</span>
        </div>
        <div class="flex">
          <span class="money">$${Number(d.cost||0).toFixed(2)}</span>
          <a href="#" onclick="openEdit('${d.uid}');return false;" class="muted" style="text-decoration:underline dotted">Edit</a>
          <a href="#" onclick="if(confirm(\`${undoText}\`)) undoDraft('${d.uid}');return false;" class="muted" style="text-decoration:underline dotted">Undo</a>
        </div>
      </div>
    `;
  }).join('');
  $('#draftedList').innerHTML = rows;
}
function openEdit(uid){
  const lg = state.leagues[state.scoring];
  const d = lg.drafted.find(x=>x.uid===uid); if(!d) return;
  const teams = lg.teams.map(t=>`<option value="${t.id}" ${t.id===d.draftedBy?'selected':''}>${t.name}</option>`).join('');
  const html = `
    <div class="panel">
      <h3>Edit Draft — ${d.name}</h3>
      <div class="bar">
        <label>Manager
          <select class="select" id="editTeam">${teams}</select>
        </label>
        <label>Amount ($ — step 0.50)
          <input class="input" id="editAmt" type="number" step="0.5" value="${Number(d.cost||0).toFixed(2)}">
        </label>
        <button class="btn" onclick="applyEdit('${d.uid}')">Save</button>
        <button class="btn-ghost btn" onclick="renderDraftedBox()">Cancel</button>
      </div>
    </div>`;
  $('#draftedList').innerHTML = html + $('#draftedList').innerHTML;
}
function applyEdit(uid){
  const lg = state.leagues[state.scoring];
  const d = lg.drafted.find(x=>x.uid===uid); if(!d) return;
  const newTeam = Number($('#editTeam').value);
  const newAmt = Number($('#editAmt').value);
  if (isNaN(newAmt) || newAmt<MIN_BID || ((newAmt*2)%1)!==0){ alert('Invalid amount'); return; }
  // Adjust budgets
  if (newTeam!==d.draftedBy){
    lg.teams = lg.teams.map(t=>{
      if (t.id===d.draftedBy) { const spent=Number((t.spent-d.cost).toFixed(2)); return {...t, spent, budget:Number((200-spent).toFixed(2))}; }
      if (t.id===newTeam) { const spent=Number((t.spent+newAmt).toFixed(2)); return {...t, spent, budget:Number((200-spent).toFixed(2))}; }
      return t;
    });
  }else{
    // same team: adjust delta
    const delta = newAmt - d.cost;
    lg.teams = lg.teams.map(t=>{
      if (t.id===newTeam){ const spent=Number((t.spent+delta).toFixed(2)); return {...t, spent, budget:Number((200-spent).toFixed(2))}; }
      return t;
    });
  }
  // Apply on drafted list
  lg.drafted = lg.drafted.map(x=> x.uid===uid ? {...x, draftedBy:newTeam, cost:newAmt} : x);
  // Apply back to players list mark
  const list = state.players[state.scoring];
  const idx = list.findIndex(x=>x.id===d.id && x.name===d.name);
  if (idx>=0){ list[idx] = {...list[idx], draftedBy:newTeam, cost:newAmt}; }
  renderDraft();
}
function undoDraft(uid){
  const lg = state.leagues[state.scoring];
  const d = lg.drafted.find(x=>x.uid===uid); if(!d) return;
  // unmark player
  const list = state.players[state.scoring];
  const idx = list.findIndex(x=>x.id===d.id && x.name===d.name);
  if (idx>=0){ list[idx] = {...list[idx], draftedBy:null, cost:null}; }
  // budget back
  lg.teams = lg.teams.map(t=>{
    if (t.id===d.draftedBy){ const spent=Number((t.spent-(d.cost||0)).toFixed(2)); return {...t, spent, budget:Number((200-spent).toFixed(2))}; }
    return t;
  });
  // remove entry
  lg.drafted = lg.drafted.filter(x=>x.uid!==uid);
  renderDraft();
}

/* ========= Roster ========= */
function toggleRoster(){ state.rosterCollapsed=!state.rosterCollapsed; renderRoster(); }
function renderRoster(){
  const lg = state.leagues[state.scoring];
  const drafted = lg.drafted.filter(p=>p.draftedBy===0);
  const list = state.players[state.scoring];

  if (state.rosterCollapsed){
    $('#rosterCollapsed').classList.remove('hidden');
    $('#rosterExpanded').classList.add('hidden');
    // collapsed summary by pos & band
    const table = {};
    POSITIONS.forEach(pos=> table[pos]={high:0,medium:0,low:0,other:0,total:0});
    drafted.forEach(p=>{
      const pr=computePosRank(p,list); const b=rankBand(pr);
      if(!table[p.pos]) return;
      table[p.pos][b] = (table[p.pos][b]||0)+1;
      table[p.pos].total++;
    });
    const rows = POSITIONS.map(pos=>{
      const r=table[pos];
      return `<tr><td>${pos}</td><td><span class="band high">${r.high}</span></td><td><span class="band medium">${r.medium}</span></td><td><span class="band low">${r.low}</span></td><td>${r.total}</td></tr>`;
    }).join('');
    $('#rosterCollapsed').innerHTML = `
      <table class="table">
        <thead><tr><th>Pos</th><th>High (≤10)</th><th>Med (11–20)</th><th>Low (21–30)</th><th>Total</th></tr></thead>
        <tbody>${rows}</tbody>
      </table>
      <div class="muted">Players ranked &gt;30 count as “Other” and aren’t shown in H/M/L columns.</div>
    `;
  }else{
    $('#rosterCollapsed').classList.add('hidden');
    $('#rosterExpanded').classList.remove('hidden');
    const order=['QB','RB','WR','TE','K','DEF'];
    const blocks = order.map(pos=>{
      const posList = drafted.filter(p=>p.pos===pos).sort((a,b)=> a.name.localeCompare(b.name));
      if(!posList.length) return '';
      const items = posList.map(p=>{
        const pr=computePosRank(p,list); const b=rankBand(pr);
        return `<div class="flex" style="justify-content:space-between;border-bottom:1px solid #2a3a44;padding:6px 0">
          <div>
            <span class="band ${b}">${pr?('#'+pr):'—'}</span>
            <b>${p.name}</b> <span class="muted">• ${p.teamAbbr} • Bye ${p.bye||'—'}</span>
          </div>
          <div class="money">$${Number(p.cost||0).toFixed(2)}</div>
        </div>`;
      }).join('');
      return `<div class="panel"><h3>${pos} • ${posList.length}</h3>${items}</div>`;
    }).join('');
    $('#rosterExpanded').innerHTML = blocks || `<div class="muted">No players yet</div>`;
  }
}

/* ========= Managers ========= */
function renderManagers(){
  $('#mgrLeague').textContent = state.scoring;
  const lg = state.leagues[state.scoring];
  const list = state.players[state.scoring];
  // table 1
  const rows = lg.teams.map(t=>{
    const c = countsByPosForTeam(lg.drafted, t.id);
    const draftedCt = countDraftedByTeam(lg.drafted, t.id);
    const maxB = maxBidForTeam(t, lg.drafted, t.id, state.rosterSize);
    return `<tr ${t.id===0?'style="outline:2px solid rgba(43,182,115,.6)"':''}>
      <td>${t.name}</td>
      <td class="money">$${Number(200-(t.spent||0)).toFixed(2)}</td>
      <td class="money">$${maxB.toFixed(2)}</td>
      <td>${draftedCt}</td>
      <td>
        <span class="chip">QB ${c.QB}</span>
        <span class="chip">RB ${c.RB}</span>
        <span class="chip">WR ${c.WR}</span>
        <span class="chip">TE ${c.TE}</span>
        <span class="chip">K ${c.K}</span>
        <span class="chip">DEF ${c.DEF}</span>
      </td>
    </tr>`;
  }).join('');
  $('#managersTable').innerHTML = `
    <table class="table">
      <thead><tr><th>Team</th><th>$ Left</th><th>Max Bid</th><th># Drafted</th><th>By Position</th></tr></thead>
      <tbody>${rows}</tbody>
    </table>
  `;

  // table 2 — tier snapshot
  const shortTiers = ['Top 5','6–10','11–15','16–20'];
  function countsByPosTier(teamId){
    const counts={QB:{},RB:{},WR:{},TE:{}}; 
    for(const p of lg.drafted){
      if(p.draftedBy!==teamId) continue;
      if(!counts[p.pos]) continue;
      const pr=computePosRank(p,list);
      const lab=tierForRank(pr);
      counts[p.pos][lab]=(counts[p.pos][lab]||0)+1;
    }
    return counts;
  }
  const head2 = `<tr><th>Team</th>${['QB','RB','WR','TE'].map(pos=>`<th colspan="${shortTiers.length}" style="text-align:center">${pos}</th>`).join('')}</tr>
                 <tr><th></th>${['QB','RB','WR','TE'].map(pos=> shortTiers.map(t=>`<th>${t}</th>`).join('')).join('')}</tr>`;
  const body2 = lg.teams.map(t=>{
    const cnt=countsByPosTier(t.id);
    const cells = ['QB','RB','WR','TE'].flatMap(pos=> shortTiers.map(tr=> `<td>${cnt[pos]?.[tr]||0}</td>`)).join('');
    return `<tr ${t.id===0?'style="outline:2px solid rgba(43,182,115,.6)"':''}><td>${t.id===0?'⭐ ':''}${t.name}</td>${cells}</tr>`;
  }).join('');
  $('#tierSnapshot').innerHTML = `<table class="table"><thead>${head2}</thead><tbody>${body2}</tbody></table>`;
}

/* ========= Settings ========= */
function renderSettings(){
  // participants list (inputs)
  const inputs = state.participants.map((name,i)=>`
    <div class="flex">
      <label style="width:120px" class="muted">Team ${i+1}${i===0?' (You)':''}</label>
      <input class="input" id="pname-${i}" value="${name}">
    </div>
  `).join('');
  $('#participants').innerHTML = inputs;
}
function saveParticipants(){
  const names = state.participants.map((_,i)=> $('#pname-'+i).value.trim() || (i===0?'My Team':`Team ${i+1}`));
  state.participants = names;
  // push to both leagues
  ['PPR','STD'].forEach(lg=>{
    state.leagues[lg].teams = state.leagues[lg].teams.map(t=> ({...t, name:names[t.id]}));
  });
  alert('Saved names');
  if (state.view==='managers') renderManagers();
  if (state.view==='draft') renderDraft();
}
function resetParticipants(){
  state.participants = Array.from({length:10},(_,i)=> i===0 ? 'My Team' : `Team ${i+1}`);
  saveParticipants();
}

/* ========= CSV Import (simple parser) ========= */
function importCSV(ev, which){
  const file = ev.target.files[0]; if(!file) return;
  const reader = new FileReader();
  reader.onload = ()=>{
    const rows = csvToRows(reader.result);
    const headers = rows[0].map(h=>h.trim());
    const data = rows.slice(1).map(arr=>{
      const o={}; headers.forEach((h,i)=> o[h]=arr[i]); return o;
    });
    // normalize
    const players = data.map((r,idx)=>{
      const name = (r['PLAYER NAME']||r['Player']||r['PLAYER']||'').trim();
      if(!name) return null;
      let team=(r['TEAM']||r['Team']||r['NFL Team']||r['Tm']||'').trim().toUpperCase();
      if(team==='GB') team='GBP'; if(team==='JAC')team='JAX'; if(team==='LVR')team='LV'; if(team==='LA')team='LAR'; if(team==='WSH')team='WAS';
      const pos = String(r['POS']||r['Pos']||r['Position']||'').toUpperCase().replace(/[0-9]+$/,'').replace('DST','DEF');
      const rk = Number(r['RK']||r['Rk']||r['Rank']||r['Overall']||idx+1);
      const bye = (r['BYE']||r['Bye']||r['Bye Week']||'').toString().trim();
      const ecrVsAdp=(r['ECR VS ADP']||r['ECR vs ADP']||'').toString().trim();
      return {id:idx+1,name,teamAbbr:team,pos,rank:rk,bye,ecrVsAdp,draftedBy:null,cost:null};
    }).filter(Boolean).sort((a,b)=> (a.rank||9999)-(b.rank||9999));
    state.players[which] = players;
    renderDraft();
    alert(`Loaded ${players.length} players for ${which}`);
  };
  reader.readAsText(file);
}
function csvToRows(text){
  // simple CSV splitter (handles basic quotes)
  const lines = text.replace(/\r/g,'').split('\n').filter(Boolean);
  return lines.map(line=>{
    const out=[]; let cur=''; let inQ=false;
    for (let i=0;i<line.length;i++){
      const ch=line[i];
      if (ch==='"' ){ 
        if (inQ && line[i+1]==='"'){ cur+='"'; i++; }
        else inQ=!inQ;
      } else if (ch===',' && !inQ){ out.push(cur); cur=''; }
      else cur+=ch;
    }
    out.push(cur);
    return out;
  });
}
function importSOS(ev){
  const file=ev.target.files[0]; if(!file) return;
  const reader=new FileReader();
  reader.onload=()=>{
    const rows = csvToRows(reader.result);
    const headers = rows[0].map(h=>h.trim());
    const data = rows.slice(1).map(arr=>{ const o={}; headers.forEach((h,i)=> o[h]=arr[i]); return o; });
    const map = {};
    data.forEach(r=>{
      let team = (r['Team']||r['TEAM']||'').toUpperCase().trim();
      if(!team) return;
      if(team==='GB') team='GBP'; if(team==='JAC')team='JAX'; if(team==='LVR')team='LV'; if(team==='LA')team='LAR'; if(team==='WSH')team='WAS';
      const entry={};
      [['QB','QB'],['RB','RB'],['WR','WR'],['TE','TE'],['K','K'],['DST','DEF']].forEach(([col,pos])=>{
        const blurb = r[col]||'';
        const m = String(blurb).match(/(\d)\s*star/i);
        entry[pos] = {stars: m?parseInt(m[1],10):null, blurb};
      });
      map[team]=entry;
    });
    state.sosMap = map;
    alert('Loaded SoS for '+Object.keys(map).length+' teams');
    if (state.view==='draft') renderDraft();
  };
  reader.readAsText(file);
}

/* ========= Export ========= */
function exportDraft(){
  const lg = state.leagues[state.scoring];
  const rows = [['League','Manager','Player','NFL Team','Pos','Cost','Timestamp']];
  lg.drafted.forEach(p=>{
    const mgr = lg.teams.find(t=>t.id===p.draftedBy)?.name || ('Team '+(p.draftedBy+1));
    rows.push([state.scoring,mgr,p.name,p.teamAbbr,p.pos,p.cost,p.ts||'']);
  });
  const csv = rows.map(r=> r.map(x=>{
    const s = x==null?'':String(x);
    return /[",\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s;
  }).join(',')).join('\n');
  const a = document.createElement('a');
  a.href=URL.createObjectURL(new Blob([csv],{type:'text/csv'}));
  a.download=`draft_results_${state.scoring}.csv`;
  document.body.appendChild(a); a.click();
  setTimeout(()=>{URL.revokeObjectURL(a.href); a.remove();},500);
}

/* ========= Details (lightweight) ========= */
function openDetails(escId){
  const p = findByEscId(escId); if(!p) return;
  const list = state.players[state.scoring];
  const pr = computePosRank(p,list);
  const sos = state.sosMap?.[p.teamAbbr]?.[p.pos];
  const band = rankBand(pr);
  const delta = p.ecrVsAdp? `ECR vs ADP: ${p.ecrVsAdp}` : '';
  const inj = state.injuriesByPlayer?.[p.name];
  const tag = state.tagsByPlayer?.[p.name];

  const details = `
    <div class="panel">
      <div class="flex" style="justify-content:space-between">
        <h3>${p.name} <span class="badge-pos">${p.pos}</span></h3>
        <button class="btn-ghost btn" onclick="renderDraft()">Close</button>
      </div>
      <div class="muted">${p.teamAbbr} • Bye ${p.bye||'—'}</div>
      <div class="space"></div>
      <div class="flex">
        <span class="band ${band}">Pos Rank ${pr?('#'+pr):'—'}</span>
        ${sos && typeof sos.stars==='number' ? `<span class="sos"><span class="stars">${starsTxt(sos.stars)}</span>SoS</span>`:''}
        ${delta? `<span class="chip">${delta}</span>`:''}
        ${inj? `<span class="icon icon-injury" title="${inj.summary||''}">✚</span>`:''}
        ${tag?.tag==='sleeper'? `<span class="icon icon-sleeper" title="${tag.reason||''}">☾</span>`:''}
        ${tag?.tag==='bust'? `<span class="icon icon-bust" title="${tag.reason||''}">⚠</span>`:''}
      </div>
      <div class="space"></div>
      <div class="muted">Recommendation is based on position rank band, ECR vs ADP, SoS, injuries, and roster need.</div>
    </div>
  `;
  // Replace players list temporarily with details
  $('#playersList').innerHTML = details;
}

/* ========= Sample Data ========= */
function loadSample(){
  const sample = [
    {id:1,name:"Ja'Marr Chase",teamAbbr:"CIN",pos:"WR",rank:1,bye:"10",ecrVsAdp:"+4.1"},
    {id:2,name:"Bijan Robinson",teamAbbr:"ATL",pos:"RB",rank:2,bye:"5",ecrVsAdp:"+0.7"},
    {id:3,name:"Jahmyr Gibbs",teamAbbr:"DET",pos:"RB",rank:3,bye:"8",ecrVsAdp:"+2.9"},
    {id:4,name:"Saquon Barkley",teamAbbr:"PHI",pos:"RB",rank:4,bye:"9",ecrVsAdp:"+3.8"},
    {id:5,name:"CeeDee Lamb",teamAbbr:"DAL",pos:"WR",rank:5,bye:"10",ecrVsAdp:"-0.4"},
    {id:6,name:"Justin Jefferson",teamAbbr:"MIN",pos:"WR",rank:6,bye:"6",ecrVsAdp:"+0.7"},
    {id:7,name:"Patrick Mahomes",teamAbbr:"KC",pos:"QB",rank:12,bye:"6",ecrVsAdp:"+0.5"},
    {id:8,name:"Josh Allen",teamAbbr:"BUF",pos:"QB",rank:13,bye:"13",ecrVsAdp:"+0.2"},
    {id:9,name:"Sam LaPorta",teamAbbr:"DET",pos:"TE",rank:20,bye:"8",ecrVsAdp:"+0.6"},
    {id:10,name:"Travis Kelce",teamAbbr:"KC",pos:"TE",rank:21,bye:"6",ecrVsAdp:"-0.3"}
  ];
  state.players.PPR = sample.map((p,i)=>({...p,id:i+1}));
  state.players.STD = sample.map((p,i)=>({...p,id:1000+i+1}));
  state.sosMap = {
    CIN:{ WR:{stars:3,blurb:"Neutral WR"}, RB:{stars:4}, QB:{stars:2}, TE:{stars:2} },
    ATL:{ RB:{stars:4}, WR:{stars:3} },
    DET:{ RB:{stars:4}, TE:{stars:3} },
    PHI:{ RB:{stars:3} },
    DAL:{ WR:{stars:4} },
    MIN:{ WR:{stars:3} },
    KC :{ QB:{stars:5}, TE:{stars:4} },
    BUF:{ QB:{stars:4} }
  };
  renderDraft();
  alert('Sample data loaded');
}

/* ========= Boot ========= */
function boot(){
  // build initial team filter list
  const teamSel = $('#filterTeam'); teamSel.innerHTML = `<option value="">All Teams</option>`;
  // render first view
  showPage('draft');
}
boot();
</script>
</body>
</html>
  <body>
  <header>
    <h1>Fantasy Draft Dashboard</h1>
    <nav>
      <a href="#" onclick="showPage('draft')">Draft</a>
      <a href="#" onclick="showPage('roster')">My Roster</a>
      <a href="#" onclick="showPage('managers')">Managers</a>
      <a href="#" onclick="showPage('settings')">Settings</a>
    </nav>
  </header>

  <main class="container">
    <!-- Draft Page -->
        <!-- Draft Page -->
    <section id="draft" class="page">
      <div class="panel">
        <div class="bar">
          <span class="muted">Active League:</span>
          <button id="btnPPR" class="chip active" onclick="setScoring('PPR')">PPR</button>
          <button id="btnSTD" class="chip" onclick="setScoring('STD')">Standard</button>
          <span class="muted">|</span>
          <span>My Budget Left: <b class="money" id="myBudget">$200.00</b></span>
          <span>My Max Bid: <b class="money" id="myMaxBid">$200.00</b></span>
        </div>
      </div>

      <div class="space"></div>

      <div class="panel">
        <h3>Filters</h3>
        <div class="bar">
          <label>Team:
            <select class="select" id="filterTeam" onchange="onFilterChange()"></select>
          </label>
          <label>Position:
            <select class="select" id="filterPos" onchange="onFilterChange()">
              <option value="ALL">ALL</option>
              <option>QB</option><option>RB</option><option>WR</option>
              <option>TE</option><option>K</option><option>DEF</option>
            </select>
          </label>
          <label class="flex" style="flex:1; max-width:420px">
            <input class="input" id="searchBox" placeholder="Search players…" oninput="onSearchInput(this.value)" style="flex:1">
          </label>
        </div>
      </div>

      <div class="space"></div>

      <div class="panel">
        <h3 id="playersTitle">All Available Players</h3>
        <div id="playersList" class="cards"></div>
      </div>

      <div class="space"></div>

      <div class="panel">
        <div class="bar">
          <h3 style="margin-right:auto">Drafted</h3>
          <button class="chip" onclick="setDraftedView('last3')">Last 3</button>
          <button class="chip" onclick="setDraftedView('last10')">Last 10</button>
          <button class="chip" onclick="setDraftedView('all')">All</button>
          <button class="chip" onclick="toggleDraftedCollapse()">Toggle</button>
        </div>
        <div id="draftedBox" class="hidden">
          <div id="draftedList"></div>
        </div>
        <div id="draftedCollapsedNote" class="muted">Select a view above to expand.</div>
      </div>
    </section>

    <!-- Roster Page -->
    <section id="roster" class="page hidden">
      <div class="panel">
        <div class="bar">
          <h3 style="margin-right:auto">My Roster</h3>
          <button class="chip" onclick="toggleRoster()">Collapse / Expand</button>
        </div>
        <div id="rosterCollapsed" class="hidden"></div>
        <div id="rosterExpanded"></div>
      </div>
    </section>

    <!-- Managers Page -->
    <section id="managers" class="page hidden">
      <div class="panel">
        <h3>League Managers — <span id="mgrLeague">PPR</span></h3>
        <div id="managersTable"></div>
      </div>
      <div class="space"></div>
      <div class="panel">
        <h3>Tier Snapshot (QB/RB/WR/TE)</h3>
        <div id="tierSnapshot"></div>
      </div>
    </section>

    <!-- Settings Page -->
    <section id="settings" class="page hidden">
      <div class="panel">
        <h3>Imports & Default League</h3>
        <div class="bar">
          <button id="defPPR" class="chip active" onclick="setScoring('PPR')">Default PPR</button>
          <button id="defSTD" class="chip" onclick="setScoring('STD')">Default Standard</button>
        </div>
        <div class="space"></div>
        <div class="bar" style="flex-wrap:wrap">
          <label>Import FantasyPros CSV — PPR
            <input type="file" accept=".csv" onchange="importCSV(event,'PPR')" />
          </label>
          <label>Import FantasyPros CSV — Standard
            <input type="file" accept=".csv" onchange="importCSV(event,'STD')" />
          </label>
          <label>Import Strength of Schedule CSV
            <input type="file" accept=".csv" onchange="importSOS(event)" />
          </label>
        </div>
        <div class="space"></div>
        <div class="bar">
          <button class="btn-ghost btn" onclick="exportDraft()">Export Draft CSV</button>
          <button class="btn-ghost btn" onclick="loadSample()">Load Sample Data</button>
          <button class="btn" onclick="showPage('draft')">Open Draft</button>
        </div>
      </div>

      <div class="space"></div>

      <div class="panel">
        <h3>League Participants (10)</h3>
        <div id="participants"></div>
        <div class="space"></div>
        <button class="btn" onclick="saveParticipants()">Save Names</button>
        <button class="btn-ghost btn" onclick="resetParticipants()">Reset Defaults</button>
      </div>
    </section>
  </main>
