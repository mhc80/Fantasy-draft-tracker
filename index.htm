<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Fantasy Auction Draft Tracker — Dual League</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Minimal, robust dark theme -->
  <style>
    :root{
      --bg:#0b0f12; --panel:#11181d; --line:#24333c; --text:#eaf6fb; --muted:#bcd0da;
      --chip:#10232c; --chip-line:#2c4a59; --brand:#2bb673; --accent:#4ea7c6;
      --danger:#b94a48; --ok:#1f9d55; --warn:#e0b548;
    }
    *{ box-sizing:border-box }
    html,body{ height:100% }
    body{
      margin:0; background:radial-gradient(1000px 800px at 0% -10%, rgba(124,240,161,.12), transparent 40%),
                 radial-gradient(900px 700px at 110% -10%, rgba(80,180,255,.10), transparent 40%),
                 var(--bg);
      color:var(--text); font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
      -webkit-font-smoothing:antialiased; font-synthesis-weight:none;
    }
    .container{ max-width:1200px; margin:0 auto; padding:18px }
    header{
      position:sticky; top:0; z-index:5; backdrop-filter: blur(10px);
      background:linear-gradient(135deg, rgba(43,182,115,.18), rgba(16,24,29,.85));
      border-bottom:1px solid var(--line);
    }
    header .bar{ display:flex; justify-content:space-between; align-items:center; gap:12px; padding:12px 18px }
    h1{ font-size:18px; margin:0 }
    nav { display:flex; gap:8px; flex-wrap:wrap }
    .tab{ appearance:none; border:1px solid var(--line); background:transparent; color:var(--text); border-radius:999px; padding:.35rem .9rem; cursor:pointer }
    .tab.active{ background:rgba(124,240,161,.18); border-color:rgba(124,240,161,.5) }
    .muted{ color:var(--muted) }
    .panel{
      background:linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.03));
      border:1px solid var(--line); border-radius:14px; padding:14px; margin-bottom:14px;
    }
    .title{ font-weight:800; margin:0 0 8px 0 }
    .row{ display:flex; gap:12px; flex-wrap:wrap }
    .col{ flex:1 1 300px }
    .right{ text-align:right }
    .chip{ background:var(--chip); color:#e9fbff; border:1px solid var(--chip-line); border-radius:999px; padding:.28rem .7rem; font-weight:700; cursor:pointer }
    .chip.active{ background:#14313b; border-color:#4ea7c6 }
    .btn{ background:var(--brand); color:#062312; border:none; border-radius:10px; padding:.45rem .8rem; font-weight:800; cursor:pointer }
    .btn.ghost{ background:#0f1f27; color:#e9fbff; border:1px solid #2c4a59 }
    .btn.warn{ background:var(--warn); color:#2b2000 }
    .btn.danger{ background:#762c2c; color:#fff }
    .btn:disabled{ opacity:.55; cursor:not-allowed }
    .input, .select, .num{
      width:100%; background:#0a1216; color:var(--text); border:1px solid #2c4a59; border-radius:10px; padding:.5rem .6rem;
    }
    .list{ display:grid; grid-template-columns:repeat(auto-fill,minmax(300px,1fr)); gap:10px }
    .card{ background:#11181d; border:1px solid var(--line); border-radius:12px; padding:10px }
    .card.drafted{ opacity:.45; filter:grayscale(.4); pointer-events:none }
    .titleline{ display:flex; align-items:center; gap:8px; font-weight:800 }
    .meta{ color:var(--muted); font-size:.92rem }
    .badge-pos{ background:#112730; border:1px solid #2b6a67; border-radius:999px; padding:.2rem .5rem; font-size:.78rem; font-weight:800 }
    .band{ padding:.12rem .48rem; border-radius:999px; font-weight:800; border:1px solid transparent; font-size:.78rem }
    .band.high{ color:#052916; background:rgba(68,226,138,.85); border-color:#38c172 }
    .band.medium{ color:#2d2000; background:rgba(255,209,102,.9); border-color:#e0b548 }
    .band.low{ color:#061a39; background:rgba(134,182,255,.9); border-color:#5b8ed6 }
    .band.other{ color:#0c1921; background:rgba(154,170,188,.75); border-color:#8b9aaa }
    .sos{ display:inline-flex; align-items:center; gap:6px; border:1px solid #385b6a; background:#0b1c23; border-radius:999px; padding:2px 8px; font-size:.78rem }
    .stars{ letter-spacing:.45px }
    .money{ font-variant-numeric:tabular-nums }
    .flex{ display:flex; gap:10px; align-items:center; flex-wrap:wrap }
    .grid{ display:grid; gap:10px }
    .hidden{ display:none }
    .sticky{ position:sticky; top:10px }
    /* Autocomplete */
    .ac{ position:relative }
    .ac-list{ position:absolute; left:0; right:0; top:calc(100% + 4px); background:#10171c; border:1px solid var(--line); border-radius:10px; max-height:260px; overflow:auto; z-index:10 }
    .ac-item{ padding:.45rem .6rem; cursor:pointer; display:flex; align-items:center; gap:.6rem }
    .ac-item.active, .ac-item:hover{ background:#12343e }
    /* Tables */
    table{ width:100%; border-collapse:collapse }
    th,td{ border-bottom:1px solid var(--line); padding:.55rem .5rem; text-align:left }
    th{ color:#dff0f7; background:#0c1a20 }
    /* Small responsive tweak */
    @media(max-width:720px){ .row{ flex-direction:column } }
  </style>
</head>
<body>
  <header>
    <div class="bar container">
      <h1>Fantasy Auction Draft Tracker</h1>
      <nav>
        <button class="tab active" id="nav-draft">Draft</button>
        <button class="tab" id="nav-managers">Managers</button>
        <button class="tab" id="nav-settings">Settings</button>
      </nav>
      <div class="right">
        <div class="muted">Draft Day: <strong>Aug 17</strong></div>
        <div class="muted">Toggle PPR/Standard switches leagues</div>
      </div>
    </div>
  </header>

  <main class="container" id="app">    <!-- DRAFT PAGE -->
    <section id="page-draft">
      <div class="panel">
        <div class="row">
          <div class="col">
            <div class="flex">
              <span class="muted">Active League:</span>
              <button id="btn-ppr" class="chip active">PPR</button>
              <button id="btn-std" class="chip">Standard</button>
            </div>
          </div>
          <div class="col">
            <div class="flex">
              <div class="chip">My Budget Left: <b class="money" id="ui-my-budget">$200.00</b></div>
              <div class="chip">My Max Bid: <b class="money" id="ui-my-maxbid">$200.00</b></div>
            </div>
          </div>
          <div class="col right">
            <button class="btn ghost" id="open-settings">Open Settings</button>
          </div>
        </div>
      </div>

      <div class="row">
        <!-- Filters -->
        <div class="col" style="flex:1 1 260px; max-width:360px">
          <div class="panel sticky">
            <h3 class="title">Filters</h3>
            <div class="grid">
              <label class="grid">
                <span class="muted">Team Drawn From Hat</span>
                <select id="filter-team" class="select"></select>
              </label>
              <label class="grid">
                <span class="muted">Position</span>
                <select id="filter-pos" class="select">
                  <option value="ALL">ALL</option>
                  <option>QB</option><option>RB</option><option>WR</option>
                  <option>TE</option><option>K</option><option>DEF</option>
                </select>
              </label>
              <label class="grid ac">
                <span class="muted">Search</span>
                <input id="search" class="input" placeholder="Search players…" />
                <div id="ac-list" class="ac-list hidden"></div>
              </label>
            </div>
          </div>
        </div>

        <!-- Players + Roster -->
        <div class="col" style="flex:2 1 520px">
          <div class="panel">
            <h3 class="title" id="players-title">All Available Players</h3>
            <div id="players" class="list"></div>
          </div>

          <div class="panel">
            <div class="flex">
              <h3 class="title" style="margin-right:auto">Drafted</h3>
              <button class="chip" data-view="last3" id="btn-last3">Last 3</button>
              <button class="chip" data-view="last10" id="btn-last10">Last 10</button>
              <button class="chip" data-view="all" id="btn-all">All</button>
              <button class="chip" id="btn-collapse-drafted">Collapse</button>
            </div>
            <div id="drafted-collapsed-note" class="muted">Select Last 3 / Last 10 / All to expand.</div>
            <div id="drafted-box" class="hidden">
              <div id="drafted-list"></div>
            </div>
          </div>
        </div>

        <!-- My Roster -->
        <div class="col" style="flex:1 1 360px">
          <div class="panel">
            <div class="flex">
              <h3 class="title" style="margin-right:auto">My Roster</h3>
              <button class="chip" id="btn-toggle-roster">Collapse / Expand</button>
            </div>
            <div id="roster-collapsed" class="hidden"></div>
            <div id="roster-expanded"></div>
          </div>
        </div>
      </div>
    </section>

    <!-- MANAGERS PAGE -->
    <section id="page-managers" class="hidden">
      <div class="panel">
        <h3 class="title">League Managers — <span id="mgr-league">PPR</span></h3>
        <div id="managers-table"></div>
      </div>
      <div class="panel">
        <h3 class="title">Tier Snapshot (QB/RB/WR/TE)</h3>
        <div id="tier-snapshot"></div>
      </div>
    </section>

    <!-- SETTINGS PAGE -->
    <section id="page-settings" class="hidden">
      <div class="panel">
        <h3 class="title">Imports & Defaults</h3>
        <div class="row">
          <div class="col">
            <div class="grid">
              <div class="flex">
                <button id="def-ppr" class="chip active">Default PPR</button>
                <button id="def-std" class="chip">Default Standard</button>
              </div>
              <label class="grid">
                <span class="muted">Import FantasyPros CSV — PPR</span>
                <input type="file" id="csv-ppr" accept=".csv" class="input" />
                <span class="muted" id="ppr-count"></span>
              </label>
              <label class="grid">
                <span class="muted">Import FantasyPros CSV — Standard</span>
                <input type="file" id="csv-std" accept=".csv" class="input" />
                <span class="muted" id="std-count"></span>
              </label>
              <label class="grid">
                <span class="muted">Import Strength of Schedule CSV</span>
                <input type="file" id="csv-sos" accept=".csv" class="input" />
                <span class="muted" id="sos-count"></span>
              </label>
              <div class="flex">
                <button class="btn ghost" id="btn-export">Export Draft CSV</button>
                <button class="btn ghost" id="btn-load-sample">Load Sample Data</button>
                <button class="btn" id="btn-open-draft">Open Draft</button>
              </div>
            </div>
          </div>

          <div class="col">
            <h3 class="title">League Participants (10)</h3>
            <div id="participants"></div>
            <div class="flex">
              <button class="btn" id="btn-save-names">Save Names</button>
              <button class="btn ghost" id="btn-reset-names">Reset Defaults</button>
            </div>
          </div>
        </div>
      </div>
    </section>    <!-- DETAILS OVERLAY (simple replace-in-place) -->
    <section id="details-overlay" class="hidden">
      <div class="panel" id="details-box"></div>
    </section>
  </main>  <!-- App Script (vanilla JS, no frameworks) -->
  <script>
    // ====== CONSTANTS & STATE ======
    const MIN_BID = 0.5;
    const POSITIONS = ['QB','RB','WR','TE','K','DEF'];
    const TIERS = [
      {label:'Top 5',min:1,max:5},
      {label:'6–10',min:6,max:10},
      {label:'11–15',min:11,max:15},
      {label:'16–20',min:16,max:20},
      {label:'21–30',min:21,max:30},
      {label:'31–40',min:31,max:40},
      {label:'41+',min:41,max:9999}
    ];
    const state = {
      view: 'draft',
      scoring: 'PPR',
      rosterSize: 16,
      targets: {QB:1,RB:2,WR:2,TE:1,FLEX:1,K:1,DEF:1,BN:8},
      players: {PPR:[], STD:[]},     // from CSV
      sosMap: {},                    // from CSV
      participants: Array.from({length:10},(_,i)=> i===0?'My Team':`Team ${i+1}`),
      leagues: { PPR:{teams:[],drafted:[]}, STD:{teams:[],drafted:[]}},
      filters: {team:'', pos:'ALL', q:''},
      draftedView: 'last3',
      draftedCollapsed: true,
      rosterCollapsed: false,
      injuriesByPlayer:{}, tagsByPlayer:{}
    };
    function initTeams(){
      ['PPR','STD'].forEach(key=>{
        state.leagues[key].teams = Array.from({length:10},(_,i)=>({id:i,name:state.participants[i],spent:0,budget:200}));
      });
    }
    initTeams();

    // ====== UTIL ======
    const $ = sel => document.querySelector(sel);
    const $$ = sel => Array.from(document.querySelectorAll(sel));
    const fmt$ = n => '$'+Number(n).toFixed(2);
    const uid = () => Date.now().toString(36)+Math.random().toString(36).slice(2,8);
    function rankBand(r){ if(r==null) return 'other'; if(r<=10) return 'high'; if(r<=20) return 'medium'; if(r<=30) return 'low'; return 'other'; }
    function starsTxt(n){ const x=Math.max(0,Math.min(5,n||0)); return '★'.repeat(x)+'☆'.repeat(5-x); }
    function computePosRank(p,list){
      const same=list.filter(x=>x.pos===p.pos).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
      const idx=same.findIndex(x=>x.name===p.name && x.teamAbbr===p.teamAbbr);
      return idx<0?null:(idx+1);
    }
    function tierForRank(r){ if(r==null) return '41+'; for(const t of TIERS){ if(r>=t.min && r<=t.max) return t.label; } return '41+'; }
    function countDraftedByTeam(drafted, teamId){ return drafted.reduce((n,p)=>n+(p.draftedBy===teamId?1:0),0); }
    function countsByPosForTeam(drafted,teamId){ const c={QB:0,RB:0,WR:0,TE:0,K:0,DEF:0}; drafted.forEach(d=>{ if(d.draftedBy===teamId && c[d.pos]!=null) c[d.pos]++; }); return c; }
    function maxBidForTeam(team,drafted,teamId,rosterSize){
      const draftedCt=countDraftedByTeam(drafted,teamId);
      const slotsLeft=Math.max(rosterSize-draftedCt,0);
      const reserve=Math.max(slotsLeft-1,0)*MIN_BID;
      const avail=(team?.budget??0)-reserve;
      return Number(Math.max(avail,0).toFixed(2));
    }

    // ====== ROUTING ======
    function switchView(v){
      state.view=v;
      $('#page-draft').classList.toggle('hidden', v!=='draft');
      $('#page-managers').classList.toggle('hidden', v!=='managers');
      $('#page-settings').classList.toggle('hidden', v!=='settings');
      $$('#nav-draft, #nav-managers, #nav-settings').forEach(b=>b.classList.remove('active'));
      if(v==='draft') $('#nav-draft').classList.add('active');
      if(v==='managers') $('#nav-managers').classList.add('active');
      if(v==='settings') $('#nav-settings').classList.add('active');
      if(v==='draft') renderDraft();
      if(v==='managers') renderManagers();
      if(v==='settings') renderSettings();
    }

    // ====== FILTERS & SEARCH (with autocomplete) ======
    function populateTeamFilter(){
      const sel = $('#filter-team');
      const teams = [...new Set(state.players[state.scoring].map(p=>p.teamAbbr))].sort();
      sel.innerHTML = `<option value="">All Teams</option>${teams.map(t=>`<option>${t}</option>`).join('')}`;
      sel.value = state.filters.team || '';
    }
    function onFilterChange(){
      state.filters.team = $('#filter-team').value;
      state.filters.pos = $('#filter-pos').value;
      renderDraft();
    }
    function normalize(s){ return String(s||'').normalize('NFKD').replace(/[\u0300-\u036f]/g,'').toLowerCase(); }
    function setupSearch(){
      const input = $('#search'), ac = $('#ac-list');
      input.oninput = () => {
        state.filters.q = input.value.trim();
        const q = normalize(state.filters.q);
        if(!q){ ac.classList.add('hidden'); renderDraft(); return; }
        const list = state.players[state.scoring];
        const hits = [];
        const seen = new Set();
        for(const p of list){
          const key = p.name+'|'+p.teamAbbr;
          if(seen.has(key)) continue;
          if(normalize(p.name).includes(q)){ hits.push(p); seen.add(key); if(hits.length>=12) break; }
        }
        if(!hits.length){ ac.classList.add('hidden'); renderDraft(); return; }
        ac.innerHTML = hits.map((p,i)=>`<div class="ac-item" data-i="${i}"><strong>${p.name}</strong><span class="muted">• ${p.teamAbbr} • ${p.pos}</span></div>`).join('');
        ac.classList.remove('hidden');
        $$('#ac-list .ac-item').forEach((el,i)=>{ el.onclick=()=>{ input.value=prefillName(hits[i]); state.filters.q=prefillName(hits[i]); ac.classList.add('hidden'); renderDraft(); }; });
      };
      input.onfocus = () => { if(state.filters.q) input.dispatchEvent(new Event('input')); };
      input.onblur = () => setTimeout(()=> ac.classList.add('hidden'), 120);
    }
    function prefillName(p){ return p.name; }

    // ====== RENDER: DRAFT ======
    function renderDraft(){
      // top chips
      $('#btn-ppr').classList.toggle('active', state.scoring==='PPR');
      $('#btn-std').classList.toggle('active', state.scoring==='STD');

      const lg = state.leagues[state.scoring];
      const me = lg.teams[0];
      $('#ui-my-budget').textContent = fmt$(200-(me.spent||0));
      $('#ui-my-maxbid').textContent = fmt$(maxBidForTeam(me,lg.drafted,0,state.rosterSize));

      // filters
      populateTeamFilter();
      $('#filter-pos').value = state.filters.pos;

      // filtered players
      const all = state.players[state.scoring];
      const team = state.filters.team, pos = state.filters.pos, q = (state.filters.q||'').toLowerCase();
      let list = all.slice();
      if(team) list = list.filter(p=>p.teamAbbr===team);
      if(pos && pos!=='ALL') list = list.filter(p=>p.pos===pos);
      if(q) list = list.filter(p=> p.name.toLowerCase().includes(q) || p.teamAbbr.toLowerCase().includes(q) || p.pos.toLowerCase().includes(q) );
      list = list.sort((a,b)=>{
        const ad=!!a.draftedBy, bd=!!b.draftedBy;
        if(ad!==bd) return ad?1:-1;
        const ar=computePosRank(a,all)||9999, br=computePosRank(b,all)||9999;
        return ar-br;
      });

      $('#players-title').textContent = team ? `Roster — ${team}` : 'All Available Players';

      const sosMap = state.sosMap || {};
      const items = list.map(p=>{
        const drafted = p.draftedBy!=null;
        const pr = computePosRank(p,all);
        const band = rankBand(pr);
        const sos = sosMap?.[p.teamAbbr]?.[p.pos];
        const mgr = drafted ? (lg.teams.find(t=>t.id===p.draftedBy)?.name || ('Team '+(p.draftedBy+1))) : '';

        return `
          <div class="card ${drafted?'drafted':''}">
            <div class="titleline">
              <span class="band ${band}">${pr?('#'+pr):'—'}</span>
              ${p.name} <span class="badge-pos">${p.pos}</span>
            </div>
            <div class="meta">${p.teamAbbr} ${p.bye?('• Bye '+p.bye):''}</div>
            <div class="flex" style="margin-top:6px">
              ${sos && typeof sos.stars==='number' ? `<span class="sos"><span class="stars">${starsTxt(sos.stars)}</span>SoS</span>`:''}
              ${drafted ? `<span class="muted">Drafted by ${mgr} • <span class="money">${fmt$(p.cost||0)}</span></span>`:''}
            </div>
            <div class="flex" style="margin-top:8px">
              ${drafted ? '' : quickDraftHTML(p)}
              <button class="btn ghost" onclick="openDetails(${p.id})">Details</button>
            </div>
          </div>
        `;
      }).join('');
      $('#players').innerHTML = items || `<div class="muted">No players match your filters. Load sample data in Settings if needed.</div>`;

      renderDraftedBox();
      renderRoster();
    }
    function quickDraftHTML(p){
      const options = state.leagues[state.scoring].teams.map(t=>`<option value="${t.id}">${t.name}</option>`).join('');
      return `
        <select class="select" id="qd-team-${p.id}">${options}</select>
        <input class="num" id="qd-amt-${p.id}" type="number" inputmode="decimal" step="0.5" placeholder="$" onfocus="this.select()">
        <button class="btn" onclick="quickDraft(${p.id})">Draft</button>
      `;
    }
    function quickDraft(id){
      const list = state.players[state.scoring];
      const p = list.find(x=>x.id===id); if(!p) return;
      const teamId = Number($('#qd-team-'+id).value);
      const amt = Number($('#qd-amt-'+id).value);
      if (isNaN(amt) || ((amt*2)%1)!==0 || amt<MIN_BID){ alert('Amount must be at least $0.50 in $0.50 steps'); return; }
      const lg = state.leagues[state.scoring];
      const sel=lg.teams.find(t=>t.id===teamId);
      const mb=maxBidForTeam(sel,lg.drafted,teamId,state.rosterSize);
      if (amt>mb){ alert(`Max bid for ${sel.name} is ${fmt$(mb)}`); return; }
      // update draft state
      const entry={...p, uid:uid(), draftedBy:teamId, cost:amt, ts:new Date().toISOString()};
      lg.drafted.push(entry);
      // mark player
      const idx=list.findIndex(x=>x.id===p.id && x.name===p.name);
      if(idx>=0){ list[idx]={...list[idx], draftedBy:teamId, cost:amt}; }
      // budgets
      lg.teams=lg.teams.map(t=> t.id===teamId? {...t, spent:Number((t.spent+amt).toFixed(2)), budget:Number((200-(t.spent+amt)).toFixed(2))} : t);
      renderDraft();
    }

    // ====== DRAFTED PANEL ======
    function setDraftedView(v){ state.draftedView=v; state.draftedCollapsed=false; renderDraftedBox(); }
    function toggleDraftedCollapse(){ state.draftedCollapsed=!state.draftedCollapsed; renderDraftedBox(); }
    function renderDraftedBox(){
      const box = $('#drafted-box'), note=$('#drafted-collapsed-note');
      if(state.draftedCollapsed){ box.classList.add('hidden'); note.classList.remove('hidden'); return; }
      box.classList.remove('hidden'); note.classList.add('hidden');

      const lg = state.leagues[state.scoring];
      const list = state.players[state.scoring];
      const sorted=[...lg.drafted].sort((a,b)=> new Date(b.ts||0)-new Date(a.ts||0));
      const shown = state.draftedView==='last3'?sorted.slice(0,3): state.draftedView==='last10'?sorted.slice(0,10):sorted;
      if(!shown.length){ $('#drafted-list').innerHTML = `<div class="muted">No picks yet</div>`; return; }
      const items = shown.map(d=>{
        const mgr=lg.teams.find(t=>t.id===d.draftedBy)?.name||('Team '+(d.draftedBy+1));
        const pr=computePosRank(d,list); const b=rankBand(pr);
        const undoText=`Undo pick?\n\n${d.name} (${d.pos}, ${d.teamAbbr})\nPos Rank: ${pr?('#'+pr):'—'}\nCost: ${fmt$(d.cost||0)}\nManager: ${mgr}`;
        return `
          <div class="flex" style="justify-content:space-between;border-bottom:1px solid var(--line);padding:8px 0">
            <div>
              <span class="band ${b}">${pr?('#'+pr):'—'}</span>
              <b>${d.name}</b>
              <span class="muted">• ${d.teamAbbr} • Bye ${d.bye||'—'} • ${mgr}</span>
            </div>
            <div class="flex">
              <span class="money">${fmt$(d.cost||0)}</span>
              <a href="#" class="muted" style="text-decoration:underline dotted" onclick="openEdit('${d.uid}');return false;">Edit</a>
              <a href="#" class="muted" style="text-decoration:underline dotted" onclick="if(confirm(\`${undoText}\`)) undoDraft('${d.uid}');return false;">Undo</a>
            </div>
          </div>
        `;
      }).join('');
      $('#drafted-list').innerHTML = items;
    }
    function openEdit(uid){
      const lg=state.leagues[state.scoring];
      const d=lg.drafted.find(x=>x.uid===uid); if(!d) return;
      const teams=lg.teams.map(t=>`<option value="${t.id}" ${t.id===d.draftedBy?'selected':''}>${t.name}</option>`).join('');
      const html = `
        <div class="panel">
          <h3 class="title">Edit Draft — ${d.name}</h3>
          <div class="flex">
            <label>Manager <select id="edit-team" class="select">${teams}</select></label>
            <label>Amount ($ — step 0.50) <input id="edit-amt" class="num" type="number" step="0.5" value="${Number(d.cost||0).toFixed(2)}"></label>
            <button class="btn" onclick="applyEdit('${d.uid}')">Save</button>
            <button class="btn ghost" onclick="renderDraftedBox()">Cancel</button>
          </div>
        </div>
      `;
      $('#drafted-list').innerHTML = html + $('#drafted-list').innerHTML;
    }
    function applyEdit(uid){
      const lg=state.leagues[state.scoring];
      const d=lg.drafted.find(x=>x.uid===uid); if(!d) return;
      const newTeam=Number($('#edit-team').value);
      const newAmt=Number($('#edit-amt').value);
      if(isNaN(newAmt)||newAmt<MIN_BID||((newAmt*2)%1)!==0){ alert('Invalid amount'); return; }
      if(newTeam!==d.draftedBy){
        lg.teams=lg.teams.map(t=>{
          if(t.id===d.draftedBy){ const spent=Number((t.spent-(d.cost||0)).toFixed(2)); return {...t,spent,budget:Number((200-spent).toFixed(2))}; }
          if(t.id===newTeam){ const spent=Number((t.spent+newAmt).toFixed(2)); return {...t,spent,budget:Number((200-spent).toFixed(2))}; }
          return t;
        });
      }else{
        const delta=newAmt-(d.cost||0);
        lg.teams=lg.teams.map(t=> t.id===newTeam? {...t,spent:Number((t.spent+delta).toFixed(2)),budget:Number((200-(t.spent+delta)).toFixed(2))} : t);
      }
      // update drafted + players list
      lg.drafted=lg.drafted.map(x=> x.uid===uid? {...x,draftedBy:newTeam,cost:newAmt} : x);
      const list=state.players[state.scoring];
      const idx=list.findIndex(x=>x.id===d.id && x.name===d.name); if(idx>=0){ list[idx]={...list[idx], draftedBy:newTeam, cost:newAmt}; }
      renderDraft();
    }
    function undoDraft(uid){
      const lg=state.leagues[state.scoring];
      const d=lg.drafted.find(x=>x.uid===uid); if(!d) return;
      const list=state.players[state.scoring];
      const idx=list.findIndex(x=>x.id===d.id && x.name===d.name);
      if(idx>=0){ list[idx]={...list[idx], draftedBy:null, cost:null}; }
      lg.teams=lg.teams.map(t=> t.id===d.draftedBy? {...t, spent:Number((t.spent-(d.cost||0)).toFixed(2)), budget:Number((200-(t.spent-(d.cost||0))).toFixed(2))}: t);
      lg.drafted=lg.drafted.filter(x=>x.uid!==uid);
      renderDraft();
    }

    // ====== ROSTER ======
    function toggleRoster(){ state.rosterCollapsed=!state.rosterCollapsed; renderRoster(); }
    function renderRoster(){
      const lg=state.leagues[state.scoring];
      const drafted=lg.drafted.filter(p=>p.draftedBy===0);
      const list=state.players[state.scoring];

      if(state.rosterCollapsed){
        $('#roster-collapsed').classList.remove('hidden');
        $('#roster-expanded').classList.add('hidden');
        const table={}; POSITIONS.forEach(pos=> table[pos]={high:0,medium:0,low:0,other:0,total:0});
        drafted.forEach(p=>{ const pr=computePosRank(p,list); const b=rankBand(pr); if(!table[p.pos]) return; table[p.pos][b]++; table[p.pos].total++; });
        const rows = POSITIONS.map(pos=>`<tr><td>${pos}</td><td><span class="band high">${table[pos].high}</span></td><td><span class="band medium">${table[pos].medium}</span></td><td><span class="band low">${table[pos].low}</span></td><td>${table[pos].total}</td></tr>`).join('');
        $('#roster-collapsed').innerHTML = `
          <table>
            <thead><tr><th>Pos</th><th>High (≤10)</th><th>Med (11–20)</th><th>Low (21–30)</th><th>Total</th></tr></thead>
            <tbody>${rows}</tbody>
          </table>
          <div class="muted">Players ranked &gt;30 count as “Other”.</div>
        `;
      }else{
        $('#roster-collapsed').classList.add('hidden');
        $('#roster-expanded').classList.remove('hidden');
        const order=['QB','RB','WR','TE','K','DEF'];
        const blocks = order.map(pos=>{
          const arr=drafted.filter(p=>p.pos===pos).sort((a,b)=>a.name.localeCompare(b.name));
          if(!arr.length) return '';
          const items=arr.map(p=>{
            const pr=computePosRank(p,list); const b=rankBand(pr);
            return `<div class="flex" style="justify-content:space-between;border-bottom:1px solid var(--line);padding:6px 0">
              <div><span class="band ${b}">${pr?('#'+pr):'—'}</span> <b>${p.name}</b> <span class="muted">• ${p.teamAbbr} • Bye ${p.bye||'—'}</span></div>
              <div class="money">${fmt$(p.cost||0)}</div>
            </div>`;
          }).join('');
          return `<div class="panel"><h3 class="title">${pos} • ${arr.length}</h3>${items}</div>`;
        }).join('');
        $('#roster-expanded').innerHTML = blocks || `<div class="muted">No players yet</div>`;
      }
    }

    // ====== MANAGERS ======
    function renderManagers(){
      $('#mgr-league').textContent = state.scoring;
      const lg=state.leagues[state.scoring];
      const list=state.players[state.scoring];

      // main table
      const rows=lg.teams.map(t=>{
        const c=countsByPosForTeam(lg.drafted,t.id);
        const draftedCt=countDraftedByTeam(lg.drafted,t.id);
        const maxB=maxBidForTeam(t,lg.drafted,t.id,state.rosterSize);
        return `<tr ${t.id===0?'style="outline:2px solid rgba(43,182,115,.6)"':''}>
          <td>${t.name}</td>
          <td class="money">${fmt$(200-(t.spent||0))}</td>
          <td class="money">${fmt$(maxB)}</td>
          <td>${draftedCt}</td>
          <td>
            <span class="chip">QB ${c.QB}</span>
            <span class="chip">RB ${c.RB}</span>
            <span class="chip">WR ${c.WR}</span>
            <span class="chip">TE ${c.TE}</span>
            <span class="chip">K ${c.K}</span>
            <span class="chip">DEF ${c.DEF}</span>
          </td>
        </tr>`;
      }).join('');
      $('#managers-table').innerHTML = `<table>
        <thead><tr><th>Team</th><th>$ Left</th><th>Max Bid</th><th># Drafted</th><th>By Position</th></tr></thead>
        <tbody>${rows}</tbody></table>`;

      // tier snapshot
      const shortTiers=['Top 5','6–10','11–15','16–20'];
      function countsByPosTier(teamId){
        const counts={QB:{},RB:{},WR:{},TE:{}}; 
        for(const p of lg.drafted){
          if(p.draftedBy!==teamId) continue;
          if(!counts[p.pos]) continue;
          const pr=computePosRank(p,list);
          const lab=tierForRank(pr);
          counts[p.pos][lab]=(counts[p.pos][lab]||0)+1;
        }
        return counts;
      }
      const head2 = `<tr><th>Team</th>${['QB','RB','WR','TE'].map(pos=>`<th colspan="${shortTiers.length}" style="text-align:center">${pos}</th>`).join('')}</tr>
                     <tr><th></th>${['QB','RB','WR','TE'].map(pos=> shortTiers.map(t=>`<th>${t}</th>`).join('')).join('')}</tr>`;
      const body2 = lg.teams.map(t=>{
        const cnt=countsByPosTier(t.id);
        const cells=['QB','RB','WR','TE'].flatMap(pos=> shortTiers.map(tr=> `<td>${cnt[pos]?.[tr]||0}</td>`)).join('');
        return `<tr ${t.id===0?'style="outline:2px solid rgba(43,182,115,.6)"':''}><td>${t.id===0?'⭐ ':''}${t.name}</td>${cells}</tr>`;
      }).join('');
      $('#tier-snapshot').innerHTML = `<table><thead>${head2}</thead><tbody>${body2}</tbody></table>`;
    }

    // ====== SETTINGS ======
    function renderSettings(){
      $('#def-ppr').classList.toggle('active', state.scoring==='PPR');
      $('#def-std').classList.toggle('active', state.scoring==='STD');
      $('#ppr-count').textContent = state.players.PPR.length ? `Loaded ${state.players.PPR.length} players (PPR)` : 'No PPR file loaded yet';
      $('#std-count').textContent = state.players.STD.length ? `Loaded ${state.players.STD.length} players (Standard)` : 'No Standard file loaded yet';
      $('#sos-count').textContent = Object.keys(state.sosMap||{}).length ? `Loaded SoS for ${Object.keys(state.sosMap).length} teams` : 'No SoS file loaded yet';

      // participants
      const html = state.participants.map((name,i)=>`
        <div class="flex">
          <label style="width:140px" class="muted">Team ${i+1}${i===0?' (You)':''}</label>
          <input class="input" id="pname-${i}" value="${name}">
        </div>
      `).join('');
      $('#participants').innerHTML = html;
    }
    function saveParticipants(){
      const names = state.participants.map((_,i)=> ($('#pname-'+i).value || '').trim() || (i===0?'My Team':`Team ${i+1}`));
      state.participants = names;
      ['PPR','STD'].forEach(lg=>{ state.leagues[lg].teams = state.leagues[lg].teams.map(t=> ({...t, name:names[t.id]})); });
      alert('Saved names'); if(state.view==='managers') renderManagers(); if(state.view==='draft') renderDraft();
    }
    function resetParticipants(){ state.participants = Array.from({length:10},(_,i)=> i===0?'My Team':`Team ${i+1}`); saveParticipants(); }

    // ====== CSV IMPORTS ======
    function csvToRows(text){
      const lines=text.replace(/\r/g,'').split('\n').filter(l=>l.length>0);
      return lines.map(line=>{
        const out=[]; let cur=''; let q=false;
        for(let i=0;i<line.length;i++){
          const ch=line[i];
          if(ch==='"'){ if(q && line[i+1]==='"'){ cur+='"'; i++; } else q=!q; }
          else if(ch===',' && !q){ out.push(cur); cur=''; }
          else cur+=ch;
        }
        out.push(cur); return out;
      });
    }
    function importPlayers(which, file){
      const reader = new FileReader();
      reader.onload = ()=>{
        const rows=csvToRows(reader.result); const headers = rows[0].map(h=>h.trim());
        const data = rows.slice(1).map(arr=>{ const o={}; headers.forEach((h,i)=>o[h]=arr[i]); return o; });
        const players = data.map((r,idx)=>{
          const name=(r['PLAYER NAME']||r['Player']||r['PLAYER']||'').trim(); if(!name) return null;
          let team=(r['TEAM']||r['Team']||r['NFL Team']||r['Tm']||'').trim().toUpperCase();
          if(team==='GB')team='GBP'; if(team==='JAC')team='JAX'; if(team==='LVR')team='LV'; if(team==='LA')team='LAR'; if(team==='WSH')team='WAS';
          const pos=String(r['POS']||r['Pos']||r['Position']||'').toUpperCase().replace(/[0-9]+$/,'').replace('DST','DEF');
          const rank=Number(r['RK']||r['Rk']||r['Rank']||r['Overall']||idx+1);
          const bye=(r['BYE']||r['Bye']||r['Bye Week']||'').toString().trim();
          const ecrVsAdp=(r['ECR VS ADP']||r['ECR vs ADP']||'').toString().trim();
          return {id:idx+1,name,teamAbbr:team,pos,rank,bye,ecrVsAdp,draftedBy:null,cost:null};
        }).filter(Boolean).sort((a,b)=>(a.rank||9999)-(b.rank||9999));
        state.players[which]=players;
        if(state.view==='settings') renderSettings();
        if(state.view==='draft') renderDraft();
        alert(`Loaded ${players.length} players for ${which}`);
      };
      reader.readAsText(file);
    }
    function importSOS(file){
      const reader=new FileReader();
      reader.onload=()=>{
        const rows=csvToRows(reader.result); const headers = rows[0].map(h=>h.trim());
        const data = rows.slice(1).map(arr=>{ const o={}; headers.forEach((h,i)=>o[h]=arr[i]); return o; });
        const map={};
        data.forEach(r=>{
          let team=(r['Team']||r['TEAM']||'').toUpperCase().trim(); if(!team) return;
          if(team==='GB')team='GBP'; if(team==='JAC')team='JAX'; if(team==='LVR')team='LV'; if(team==='LA')team='LAR'; if(team==='WSH')team='WAS';
          const entry={};
          [['QB','QB'],['RB','RB'],['WR','WR'],['TE','TE'],['K','K'],['DST','DEF']].forEach(([col,pos])=>{
            const blurb=r[col]||''; const m=String(blurb).match(/(\d)\s*star/i);
            entry[pos]={stars:m?parseInt(m[1],10):null, blurb};
          });
          map[team]=entry;
        });
        state.sosMap=map;
        if(state.view==='settings') renderSettings();
        if(state.view==='draft') renderDraft();
        alert('Loaded SoS for '+Object.keys(map).length+' teams');
      };
      reader.readAsText(file);
    }

    // ====== DETAILS ======
    function openDetails(id){
      const list = state.players[state.scoring];
      const p=list.find(x=>x.id===id); if(!p) return;
      const pr=computePosRank(p,list);
      const sos=state.sosMap?.[p.teamAbbr]?.[p.pos];
      const band=rankBand(pr);
      const inj=state.injuriesByPlayer?.[p.name];
      const tag=state.tagsByPlayer?.[p.name];
      const html=`
        <div class="flex" style="justify-content:space-between">
          <h3 class="title">${p.name} <span class="badge-pos">${p.pos}</span></h3>
          <button class="btn ghost" onclick="closeDetails()">Close</button>
        </div>
        <div class="muted">${p.teamAbbr} • Bye ${p.bye||'—'}</div>
        <div class="flex" style="margin-top:8px">
          <span class="band ${band}">Pos Rank ${pr?('#'+pr):'—'}</span>
          ${sos && typeof sos.stars==='number'? `<span class="sos"><span class="stars">${starsTxt(sos.stars)}</span>SoS</span>`:''}
          ${inj? `<span class="chip">Injury: ${inj.summary||inj.status||''}</span>`:''}
          ${tag?.tag==='sleeper'? `<span class="chip">Sleeper</span>`:''}
          ${tag?.tag==='bust'? `<span class="chip">Bust</span>`:''}
        </div>
        <div class="muted" style="margin-top:8px">Recommendation uses position rank band, ECR vs ADP, schedule (SoS), injuries, and roster needs.</div>
      `;
      $('#details-box').innerHTML=html;
      $('#details-overlay').classList.remove('hidden');
      // scroll into view
      $('#details-overlay').scrollIntoView({behavior:'smooth', block:'start'});
    }
    function closeDetails(){ $('#details-overlay').classList.add('hidden'); $('#details-box').innerHTML=''; }

    // ====== EXPORT ======
    function exportDraft(){
      const lg=state.leagues[state.scoring];
      const rows=[['League','Manager','Player','NFL Team','Pos','Cost','Timestamp']];
      lg.drafted.forEach(p=>{
        const mgr=lg.teams.find(t=>t.id===p.draftedBy)?.name || ('Team '+(p.draftedBy+1));
        rows.push([state.scoring,mgr,p.name,p.teamAbbr,p.pos,p.cost,p.ts||'']);
      });
      const csv = rows.map(r=> r.map(x=>{ const s=(x==null?'':String(x)); return /[",\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s; }).join(',')).join('\n');
      const a=document.createElement('a');
      a.href=URL.createObjectURL(new Blob([csv],{type:'text/csv'}));
      a.download=`draft_results_${state.scoring}.csv`;
      document.body.appendChild(a); a.click(); setTimeout(()=>{URL.revokeObjectURL(a.href); a.remove();},300);
    }

    // ====== SAMPLE DATA ======
    function loadSample(){
      const sample = [
        {id:1,name:"Ja'Marr Chase",teamAbbr:"CIN",pos:"WR",rank:1,bye:"10",ecrVsAdp:"+4.1"},
        {id:2,name:"Bijan Robinson",teamAbbr:"ATL",pos:"RB",rank:2,bye:"5",ecrVsAdp:"+0.7"},
        {id:3,name:"Jahmyr Gibbs",teamAbbr:"DET",pos:"RB",rank:3,bye:"8",ecrVsAdp:"+2.9"},
        {id:4,name:"Saquon Barkley",teamAbbr:"PHI",pos:"RB",rank:4,bye:"9",ecrVsAdp:"+3.8"},
        {id:5,name:"CeeDee Lamb",teamAbbr:"DAL",pos:"WR",rank:5,bye:"10",ecrVsAdp:"-0.4"},
        {id:6,name:"Justin Jefferson",teamAbbr:"MIN",pos:"WR",rank:6,bye:"6",ecrVsAdp:"+0.7"},
        {id:7,name:"Patrick Mahomes",teamAbbr:"KC",pos:"QB",rank:12,bye:"6",ecrVsAdp:"+0.5"},
        {id:8,name:"Josh Allen",teamAbbr:"BUF",pos:"QB",rank:13,bye:"13",ecrVsAdp:"+0.2"},
        {id:9,name:"Sam LaPorta",teamAbbr:"DET",pos:"TE",rank:20,bye:"8",ecrVsAdp:"+0.6"},
        {id:10,name:"Travis Kelce",teamAbbr:"KC",pos:"TE",rank:21,bye:"6",ecrVsAdp:"-0.3"}
      ];
      state.players.PPR = sample.map((p,i)=>({...p,id:i+1}));
      state.players.STD = sample.map((p,i)=>({...p,id:1000+i+1}));
      state.sosMap = {
        CIN:{ WR:{stars:3,blurb:"Neutral WR"}, RB:{stars:4}, QB:{stars:2}, TE:{stars:2} },
        ATL:{ RB:{stars:4}, WR:{stars:3} },
        DET:{ RB:{stars:4}, TE:{stars:3} },
        PHI:{ RB:{stars:3} },
        DAL:{ WR:{stars:4} },
        MIN:{ WR:{stars:3} },
        KC :{ QB:{stars:5}, TE:{stars:4} },
        BUF:{ QB:{stars:4} }
      };
      renderSettings(); renderDraft();
      alert('Sample data loaded');
    }

    // ====== EVENT BINDINGS ======
    // nav
    $('#nav-draft').onclick = ()=> switchView('draft');
    $('#nav-managers').onclick = ()=> switchView('managers');
    $('#nav-settings').onclick = ()=> switchView('settings');

    // league toggle
    $('#btn-ppr').onclick = ()=>{ state.scoring='PPR'; renderDraft(); };
    $('#btn-std').onclick = ()=>{ state.scoring='STD'; renderDraft(); };

    // top open settings
    $('#open-settings').onclick = ()=> switchView('settings');

    // filters
    $('#filter-team').onchange = onFilterChange;
    $('#filter-pos').onchange = onFilterChange;
    setupSearch();

    // drafted controls
    $('#btn-last3').onclick = ()=> setDraftedView('last3');
    $('#btn-last10').onclick = ()=> setDraftedView('last10');
    $('#btn-all').onclick = ()=> setDraftedView('all');
    $('#btn-collapse-drafted').onclick = ()=> toggleDraftedCollapse();

    // roster
    $('#btn-toggle-roster').onclick = toggleRoster;

    // settings buttons
    $('#def-ppr').onclick = ()=>{ state.scoring='PPR'; renderSettings(); };
    $('#def-std').onclick = ()=>{ state.scoring='STD'; renderSettings(); };
    $('#csv-ppr').onchange = (ev)=>{ if(ev.target.files[0]) importPlayers('PPR', ev.target.files[0]); };
    $('#csv-std').onchange = (ev)=>{ if(ev.target.files[0]) importPlayers('STD', ev.target.files[0]); };
    $('#csv-sos').onchange = (ev)=>{ if(ev.target.files[0]) importSOS(ev.target.files[0]); };
    $('#btn-export').onclick = exportDraft;
    $('#btn-load-sample').onclick = loadSample;
    $('#btn-open-draft').onclick = ()=> switchView('draft');
    $('#btn-save-names').onclick = saveParticipants;
    $('#btn-reset-names').onclick = resetParticipants;

    // initial
    switchView('draft');
  </script>
</body>
</html>
